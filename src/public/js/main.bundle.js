/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,n)=>{"use strict";n.r(t);n("./node_modules/core-js/stable/index.js"),n("./node_modules/regenerator-runtime/runtime.js");var o=n("./src/js/data/config.js"),r=n("./src/js/utils/detector.js"),a=(n("./src/js/app/gameScene.js"),n("./src/js/webrtc/videoCall.js")),i=n("./src/js/app/game.js");n("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),o.default.isDev=!0,function(){if(r.default.webgl){document.getElementById("appContainer");(0,i.startPhys)(a.isInitiator)}else r.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.domElement.width,i=t.domElement.height;this.threeCamera=new o.PerspectiveCamera(r.default.camera.fov,a/i,r.default.camera.near,r.default.camera.far),this.threeCamera.position.set(r.default.camera.posX,r.default.camera.posY,r.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return n.updateSize(t)}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&a(t.prototype,n),i&&a(t,i),e}()},"./src/js/app/components/controls.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/utils/orbitControls.js"),a=n.n(r),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=new(a())(o);this.threeControls=new r(t,n),this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){this.threeControls.target.set(i.default.controls.target.x,i.default.controls.target.y,i.default.controls.target.z),this.threeControls.autoRotate=i.default.controls.autoRotate,this.threeControls.autoRotateSpeed=i.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=i.default.controls.rotateSpeed,this.threeControls.zoomSpeed=i.default.controls.zoomSpeed,this.threeControls.minDistance=i.default.controls.minDistance,this.threeControls.maxDistance=i.default.controls.maxDistance,this.threeControls.minPolarAngle=i.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=i.default.controls.maxPolarAngle,this.threeControls.enableDamping=i.default.controls.enableDamping,this.threeControls.enableZoom=i.default.controls.enableZoom,this.threeControls.dampingFactor=i.default.controls.dampingFactor}}])&&s(t.prototype,n),r&&s(t,r),e}()},"./src/js/app/components/geometry.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/components/material.js"),a=n("./src/js/data/config.js");function i(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function l(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,n,s;return t=e,(n=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new o.PlaneGeometry(e,n,r,a)}:"sphere"===e?function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new o.SphereGeometry(e,n,r)}:void 0}},{key:"place",value:function(e,t){var n,s,l=new r.default(15658734).standard,c=new o.Mesh(this.geo,l);(n=c.position).set.apply(n,i(e)),(s=c.rotation).set.apply(s,i(t)),a.default.shadow.enabled&&(c.receiveShadow=!0),this.scene.add(c)}}])&&l(t.prototype,n),s&&l(t,s),e}()},"./src/js/app/components/light.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,n,i;return t=e,(n=[{key:"init",value:function(){this.ambientLight=new o.AmbientLight(r.default.ambientLight.color),this.ambientLight.visible=r.default.ambientLight.enabled,this.pointLight=new o.PointLight(r.default.pointLight.color,r.default.pointLight.intensity,r.default.pointLight.distance),this.pointLight.position.set(r.default.pointLight.x,r.default.pointLight.y,r.default.pointLight.z),this.pointLight.visible=r.default.pointLight.enabled,this.directionalLight=new o.DirectionalLight(r.default.directionalLight.color,r.default.directionalLight.intensity),this.directionalLight.position.set(r.default.directionalLight.x,r.default.directionalLight.y,r.default.directionalLight.z),this.directionalLight.visible=r.default.directionalLight.enabled,this.directionalLight.castShadow=r.default.shadow.enabled,this.directionalLight.shadow.bias=r.default.shadow.bias,this.directionalLight.shadow.camera.near=r.default.shadow.near,this.directionalLight.shadow.camera.far=r.default.shadow.far,this.directionalLight.shadow.camera.left=r.default.shadow.left,this.directionalLight.shadow.camera.right=r.default.shadow.right,this.directionalLight.shadow.camera.top=r.default.shadow.top,this.directionalLight.shadow.camera.bottom=r.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=r.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=r.default.shadow.mapHeight,r.default.isDev&&(this.directionalLightHelper=new o.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=r.default.shadow.helperEnabled),this.hemiLight=new o.HemisphereLight(r.default.hemiLight.color,r.default.hemiLight.groundColor,r.default.hemiLight.intensity),this.hemiLight.position.set(r.default.hemiLight.x,r.default.hemiLight.y,r.default.hemiLight.z),this.hemiLight.visible=r.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),r.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&a(t.prototype,n),i&&a(t,i),e}()},"./src/js/app/components/material.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/three/build/three.module.js");var r=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new o.MeshBasicMaterial({color:t,side:o.DoubleSide}),this.standard=new o.MeshStandardMaterial({color:t,shading:o.FlatShading,roughness:1,metalness:0,side:o.DoubleSide}),this.wire=new o.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t,n){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=n,this.threeRenderer=new o.WebGLRenderer({antialias:!0,alpha:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),n.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=o.PCFSoftShadowMap,r.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return a.updateSize()}),!1),window.addEventListener("resize",(function(){return a.updateSize()}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&a(t.prototype,n),i&&a(t,i),e}()},"./src/js/app/game.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{startPhys:()=>w,startGame:()=>L,getSceneJSON:()=>x,updateRemoteObjects:()=>R,moveRemoteVideoToScene:()=>T});var o=n("./node_modules/three/build/three.module.js"),r=(n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),n("./node_modules/three/examples/jsm/loaders/GLTFLoader.js")),a=n("./node_modules/three/examples/jsm/controls/DragControls.js"),i=n("./src/js/app/game/gameController.js"),s=n("./node_modules/three/examples/js/libs/ammo.wasm.js"),l=n("./src/js/app/game/scene.js");function c(e,t,n,o,r,a,i){try{var s=e[a](i),l=s.value}catch(e){return void n(e)}s.done?t(l):Promise.resolve(l).then(o,r)}function u(e){return function(){var t=this,n=arguments;return new Promise((function(o,r){var a=e.apply(t,n);function i(e){c(a,o,r,i,s,"next",e)}function s(e){c(a,o,r,i,s,"throw",e)}i(void 0)}))}}var d,h,m,f,p=(0,i.GameController)(),g=new Map,v=new o.WebGLRenderer({alpha:!0}),b=[],y=!1,w=function(){s().then((function(e){!function(e){var t=new e.btDefaultCollisionConfiguration,n=new e.btCollisionDispatcher(t),o=new e.btDbvtBroadphase,r=new e.btSequentialImpulseConstraintSolver;new e.btDiscreteDynamicsWorld(n,o,r,t).setGravity(new e.btVector3(0,-10,0))}(e),L(!0)}))};function L(e){y=e,console.log("Started game with isInitiator = "+e),v.setPixelRatio(window.devicePixelRatio),v.setSize(window.innerWidth,window.innerHeight),v.autoClear=!1,document.getElementById("appContainer").appendChild(v.domElement),d=(0,l.initScene)(),h=(0,l.initCamera)(y),function(){E.apply(this,arguments)}(),new a.DragControls([].concat(b),h,v.domElement).addEventListener("drag",(function(e){p.sendGameobjectUpdate(M(e.object)),A()})),S()}function E(){return(E=u(regeneratorRuntime.mark((function e(){var t,n,i,s,l,c,u;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=new r.GLTFLoader,e.next=3,t.loadAsync("assets/models/duck.gltf");case 3:e.sent.scene.traverse((function(e){e.isMesh&&(f=new o.Mesh,e.scale.set(.01,.01,.01),f=e,new a.DragControls([f],h,v.domElement).addEventListener("drag",(function(e){p.sendGameobjectUpdate(M(e.object)),A()})))})),y?((n=f.clone()).name="duckMesh1",d.add(n),n.position.set(0,-4,0),g.set(n.name,n),C(n),(i=f.clone()).name="duckMesh2",i.position.set(1,-4,0),d.add(i),g.set(i.name,i),C(i)):((s=f.clone()).name="duckMesh3",s.position.set(-1,-4,0),d.add(s),g.set(s.name,s),C(s)),v.outputEncoding=o.sRGBEncoding,l=new o.PlaneGeometry(4,8/3),c=new o.MeshBasicMaterial({color:9127187,side:o.DoubleSide}),(u=new o.Mesh(l,c)).position.y=-2,u.rotation.x=Math.PI/2,d.add(u);case 13:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function T(){setTimeout((function(){console.log("------------moveRemoteVideoToScene-------------");var e=document.getElementById("remoteVideo"),t=e.offsetWidth/e.offsetHeight;console.log(e),console.log("width: "+e.offsetWidth),console.log("height: "+e.offsetHeight);var n,r,a,i=new o.PlaneGeometry(4,4/t),s=(n="remoteVideo",r=document.getElementById(n),a=new o.VideoTexture(r),new o.MeshBasicMaterial({map:a,overdraw:!0,side:o.DoubleSide})),l=new o.Mesh(i,s);d.add(l)}),1e3)}function S(){requestAnimationFrame(S),v.render(d,h)}function M(e){var t={name:e.name,position:e.position,rotation:e.rotation},n=JSON.stringify(t);return console.log("JSON:"+n),n}function x(){m.uuid,m.position,m.rotation;return JSON.stringify(b)}function R(e){var t=JSON.parse(e);if(g.has(t.name)){var n=d.getObjectByName(t.name);n.position.x=t.position.x,n.position.y=t.position.y,n.position.z=t.position.z,n.rotation.x=t.rotation._x,n.rotation.y=t.rotation._y,n.rotation.z=t.rotation._z}else{f.name=t.name,f.position.set(t.position.x,t.position.y,t.position.z);var o=f.clone();g.set(o.name,o),d.add(o),C(o)}}function C(e){b.push(e),new a.DragControls([].concat(b),h,v.domElement).addEventListener("drag",(function(e){p.sendGameobjectUpdate(M(e.object)),A()}))}function A(){v.render(d,h)}},"./src/js/app/gameScene.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var o=n("./node_modules/three/build/three.module.js"),r=n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),a=n("./src/js/app/components/renderer.js"),i=n("./src/js/app/components/camera.js"),s=n("./src/js/app/components/light.js"),l=n("./src/js/app/components/controls.js"),c=n("./src/js/app/components/geometry.js"),u=n("./src/js/app/helpers/stats.js"),d=n("./src/js/app/helpers/meshHelper.js"),h=n("./src/js/app/model/texture.js"),m=n("./src/js/app/model/model.js"),f=n("./src/js/app/managers/interaction.js"),p=n("./src/js/app/managers/datGUI.js"),g=n("./src/js/data/config.js");function v(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var b=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new o.Clock,this.scene=new o.Scene,this.scene.fog=new o.FogExp2(g.default.fog.color,g.default.fog.near),window.devicePixelRatio&&(g.default.dpr=window.devicePixelRatio),this.renderer=new a.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,t),this.light=new s.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return n.light.place(e)})),this.geometry=new c.default(this.scene),this.geometry.make("plane")(150,150,10,10),this.geometry.place([0,-20,0],[Math.PI/2,0,0]),g.default.isDev&&g.default.isShowingStats&&(this.stats=new u.default(this.renderer),this.stats.setUp()),g.default.isDev&&(this.gui=new p.default(this)),this.texture=new h.default,this.texture.load().then((function(){n.manager=new o.LoadingManager,n.model=new m.default(n.scene,n.manager,n.texture.textures),n.model.load(g.default.models[g.default.model.selected].type),n.manager.onProgress=function(e,t,n){console.log("".concat(e,": ").concat(t," ").concat(n))},n.manager.onLoad=function(){new f.default(n.renderer.threeRenderer,n.scene,n.camera.threeCamera,n.controls.threeControls),g.default.isDev&&(n.meshHelper=new d.default(n.scene,n.model.obj),g.default.mesh.enableHelper&&n.meshHelper.enable(),n.gui.load(n,n.model.obj)),g.default.isLoaded=!0,n.container.querySelector("#loading").style.display="none"}})),this.render()}var t,n,b;return t=e,(n=[{key:"render",value:function(){g.default.isDev&&g.default.isShowingStats&&u.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),g.default.isDev&&g.default.isShowingStats&&u.default.end(),r.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}])&&v(t.prototype,n),b&&v(t,b),e}()},"./src/js/app/game/gameController.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{GameController:()=>a});var o=n("./src/js/webrtc/videoCall.js"),r=[],a=function(){return{addLocalObject:function(e){console.log("localObject added for game sync: "+JSON.stringify(e)+" id: "+e.id);var t={uuid:e.uuid,position:e.position,rotation:e.rotation},n=JSON.stringify(t);r.push(n)},startSharedSceneSync:function(){},stopSharedSceneSync:function(){clearInterval(undefined)},sendGameobjectUpdate:function(e){o.dataChannel&&void 0!==e&&"open"===o.dataChannel.readyState&&o.dataChannel.send(e)},updateRemoteObjects:function(e){var t=JSON.parse(e);localElement=getLocalObject,cube.position.x=t.position.x,cube.position.y=t.position.y,cube.position.z=t.position.z,cube.rotation.x=t.rotation._x,cube.rotation.y=t.rotation._y,cube.rotation.z=t.rotation._z}}}},"./src/js/app/game/scene.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{initScene:()=>a,initCamera:()=>i});var o,r=n("./node_modules/three/build/three.module.js");function a(){return(o=new r.Scene).background=null,function(){var e=new r.DirectionalLight(16777215,1);e.position.set(2,2,0),o.add(e);var t=new r.DirectionalLight(16777215,1);t.position.set(2,2,-20),o.add(t);var n=new r.DirectionalLight(16777215,1);n.position.set(2,2,20),o.add(n)}(),o}function i(e){var t=new r.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,500);return e?(console.log("changing camera position!"),t.position.x=0,t.position.y=0,t.position.z=-10,t.lookAt(0,0,0)):(t.position.x=0,t.position.y=0,t.position.z=10,t.lookAt(0,0,0)),t}},"./src/js/app/helpers/meshHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/helpers/vertexNormalsHelper.js");function a(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=n,this.scene=t;var a=new o.WireframeGeometry(this.mesh.geometry);this.wireLine=new o.LineSegments(a),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new o.EdgesGeometry(this.mesh.geometry);this.edgesLine=new o.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new r.VertexNormalsHelper(this.mesh,2),this.boxHelper=new o.BoxHelper(this.mesh)}var t,n,i;return t=e,(n=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&a(t.prototype,n),i&&a(t,i),e}()},"./src/js/app/helpers/stats.js":(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var r,a,i,s;n.r(t),n.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,n,l;return t=e,l=[{key:"start",value:function(){r("frame").start(),i.start(),r("rAF").tick(),r("FPS").frame(),r("render").start()}},{key:"end",value:function(){r("render").end(),r("frame").end(),r("rStats").start(),r().update(),r("rStats").end()}}],(n=[{key:"setUp",value:function(){a=new BrowserStats,i=new glStats,s=new threeStats(this.renderer.threeRenderer),r=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[a,s]})}}])&&o(t.prototype,n),l&&o(t,l),e}()},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{VertexNormalsHelper:()=>l});var o=n("./node_modules/three/build/three.module.js"),r=new o.Vector3,a=new o.Vector3,i=new o.Matrix3,s=["a","b","c"];function l(e,t,n){this.object=e,this.size=void 0!==t?t:.1;var r=void 0!==n?n:16711680,a=0,i=this.object.geometry;i&&i.isGeometry?a=3*i.faces.length:i&&i.isBufferGeometry&&(a=i.attributes.normal.count);var s=new o.BufferGeometry,l=new o.Float32BufferAttribute(2*a*3,3);s.setAttribute("position",l),o.LineSegments.call(this,s,new o.LineBasicMaterial({color:r,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(o.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,n=this.geometry.attributes.position,o=this.object.geometry;if(o&&o.isGeometry){var l=o.vertices,c=o.faces;e=0;for(var u=0,d=c.length;u<d;u++)for(var h=c[u],m=0,f=h.vertexNormals.length;m<f;m++){var p=l[h[s[m]]],g=h.vertexNormals[m];r.copy(p).applyMatrix4(t),a.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(r),n.setXYZ(e,r.x,r.y,r.z),e+=1,n.setXYZ(e,a.x,a.y,a.z),e+=1}}else if(o&&o.isBufferGeometry){var v=o.attributes.position,b=o.attributes.normal;e=0;for(var y=0,w=v.count;y<w;y++)r.set(v.getX(y),v.getY(y),v.getZ(y)).applyMatrix4(t),a.set(b.getX(y),b.getY(y),b.getZ(y)),a.applyMatrix3(i).normalize().multiplyScalar(this.size).add(r),n.setXYZ(e,r.x,r.y,r.z),e+=1,n.setXYZ(e,a.x,a.y,a.z),e+=1}n.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{GLTFLoader:()=>a});var o=n("./node_modules/three/build/three.module.js");function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var a=function(){function e(e){o.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(o.Loader.prototype),{constructor:e,load:function(e,t,n,r){var a,i=this;a=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:o.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){r?r(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new o.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(n){try{i.parse(n,a,(function(n){t(n),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),n,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,r,u){var d,p={};if("string"==typeof e)d=e;else if(o.LoaderUtils.decodeText(new Uint8Array(e,0,4))===c){try{p[n.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(u&&u(e))}d=p[n.KHR_BINARY_GLTF].content}else d=o.LoaderUtils.decodeText(new Uint8Array(e));var b=JSON.parse(d);if(void 0===b.asset||b.asset.version[0]<2)u&&u(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(b.extensionsUsed)for(var y=0;y<b.extensionsUsed.length;++y){var w=b.extensionsUsed[y],L=b.extensionsRequired||[];switch(w){case n.KHR_LIGHTS_PUNCTUAL:p[w]=new i(b);break;case n.KHR_MATERIALS_CLEARCOAT:p[w]=new l;break;case n.KHR_MATERIALS_UNLIT:p[w]=new s;break;case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:p[w]=new g;break;case n.KHR_DRACO_MESH_COMPRESSION:p[w]=new m(b,this.dracoLoader);break;case n.MSFT_TEXTURE_DDS:p[w]=new a(this.ddsLoader);break;case n.KHR_TEXTURE_TRANSFORM:p[w]=new f;break;case n.KHR_MESH_QUANTIZATION:p[w]=new v;break;default:L.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new B(b,p,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(r,u)}}});var n={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function a(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=n.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=n.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[n.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=n.KHR_MATERIALS_UNLIT}function l(){this.name=n.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,n=this.lightDefs[e],r=new o.Color(16777215);void 0!==n.color&&r.fromArray(n.color);var a=void 0!==n.range?n.range:0;switch(n.type){case"directional":(t=new o.DirectionalLight(r)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new o.PointLight(r)).distance=a;break;case"spot":(t=new o.SpotLight(r)).distance=a,n.spot=n.spot||{},n.spot.innerConeAngle=void 0!==n.spot.innerConeAngle?n.spot.innerConeAngle:0,n.spot.outerConeAngle=void 0!==n.spot.outerConeAngle?n.spot.outerConeAngle:Math.PI/4,t.angle=n.spot.outerConeAngle,t.penumbra=1-n.spot.innerConeAngle/n.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+n.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==n.intensity&&(t.intensity=n.intensity),t.name=n.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return o.MeshBasicMaterial},s.prototype.extendParams=function(e,t,n){var r=[];e.color=new o.Color(1,1,1),e.opacity=1;var a=t.pbrMetallicRoughness;if(a){if(Array.isArray(a.baseColorFactor)){var i=a.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==a.baseColorTexture&&r.push(n.assignTexture(e,"map",a.baseColorTexture))}return Promise.all(r)},l.prototype.getMaterialType=function(){return o.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,n){var r=[],a=t.extensions[this.name];if(void 0!==a.clearcoatFactor&&(e.clearcoat=a.clearcoatFactor),void 0!==a.clearcoatTexture&&r.push(n.assignTexture(e,"clearcoatMap",a.clearcoatTexture)),void 0!==a.clearcoatRoughnessFactor&&(e.clearcoatRoughness=a.clearcoatRoughnessFactor),void 0!==a.clearcoatRoughnessTexture&&r.push(n.assignTexture(e,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),void 0!==a.clearcoatNormalTexture&&(r.push(n.assignTexture(e,"clearcoatNormalMap",a.clearcoatNormalTexture)),void 0!==a.clearcoatNormalTexture.scale)){var i=a.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new o.Vector2(i,i)}return Promise.all(r)};var c="glTF",u=1313821514,d=5130562;function h(e){this.name=n.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:o.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==c)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var r=new DataView(e,12),a=0;a<r.byteLength;){var i=r.getUint32(a,!0);a+=4;var s=r.getUint32(a,!0);if(a+=4,s===u){var l=new Uint8Array(e,12+a,i);this.content=o.LoaderUtils.decodeText(l)}else if(s===d){var h=12+a;this.body=e.slice(h,h+i)}a+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function m(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=n.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function f(){this.name=n.KHR_TEXTURE_TRANSFORM}function p(e){o.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),n=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),r=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),a=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new o.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var o in s)e.uniforms[o]=s[o];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",a),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return p},extendParams:function(e,t,n){var r=t.extensions[this.name];e.color=new o.Color(1,1,1),e.opacity=1;var a=[];if(Array.isArray(r.diffuseFactor)){var i=r.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==r.diffuseTexture&&a.push(n.assignTexture(e,"map",r.diffuseTexture)),e.emissive=new o.Color(0,0,0),e.glossiness=void 0!==r.glossinessFactor?r.glossinessFactor:1,e.specular=new o.Color(1,1,1),Array.isArray(r.specularFactor)&&e.specular.fromArray(r.specularFactor),void 0!==r.specularGlossinessTexture){var s=r.specularGlossinessTexture;a.push(n.assignTexture(e,"glossinessMap",s)),a.push(n.assignTexture(e,"specularMap",s))}return Promise.all(a)},createMaterial:function(e){var t=new p(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=o.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=n.KHR_MESH_QUANTIZATION}function b(e,t,n,r){o.Interpolant.call(this,e,t,n,r)}m.prototype.decodePrimitive=function(e,t){var n=this.json,o=this.dracoLoader,r=e.extensions[this.name].bufferView,a=e.extensions[this.name].attributes,i={},s={},l={};for(var c in a){var u=j[c]||c.toLowerCase();i[u]=a[c]}for(c in e.attributes){u=j[c]||c.toLowerCase();if(void 0!==a[c]){var d=n.accessors[e.attributes[c]],h=x[d.componentType];l[u]=h,s[u]=!0===d.normalized}}return t.getDependency("bufferView",r).then((function(e){return new Promise((function(t){o.decodeDracoFile(e,(function(e){for(var n in e.attributes){var o=e.attributes[n],r=s[n];void 0!==r&&(o.normalized=r)}t(e)}),i,l)}))}))},f.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},p.prototype=Object.create(o.MeshStandardMaterial.prototype),p.prototype.constructor=p,p.prototype.copy=function(e){return o.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},b.prototype=Object.create(o.Interpolant.prototype),b.prototype.constructor=b,b.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,o=this.valueSize,r=e*o*3+o,a=0;a!==o;a++)t[a]=n[r+a];return t},b.prototype.beforeStart_=b.prototype.copySampleValue_,b.prototype.afterEnd_=b.prototype.copySampleValue_,b.prototype.interpolate_=function(e,t,n,o){for(var r=this.resultBuffer,a=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,c=o-t,u=(n-t)/c,d=u*u,h=d*u,m=e*l,f=m-l,p=-2*h+3*d,g=h-d,v=1-p,b=g-d+u,y=0;y!==i;y++){var w=a[f+y+i],L=a[f+y+s]*c,E=a[m+y+i],T=a[m+y]*c;r[y]=v*w+b*L+p*E+g*T}return r};var y=0,w=1,L=2,E=3,T=4,S=5,M=6,x={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:o.NearestFilter,9729:o.LinearFilter,9984:o.NearestMipmapNearestFilter,9985:o.LinearMipmapNearestFilter,9986:o.NearestMipmapLinearFilter,9987:o.LinearMipmapLinearFilter},C={33071:o.ClampToEdgeWrapping,33648:o.MirroredRepeatWrapping,10497:o.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},j={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},P={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},_={CUBICSPLINE:void 0,LINEAR:o.InterpolateLinear,STEP:o.InterpolateDiscrete},O="OPAQUE",k="MASK",D="BLEND",I={"image/png":o.RGBAFormat,"image/jpeg":o.RGBFormat};function F(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function H(e,t,n){for(var o in n.extensions)void 0===e[o]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[o]=n.extensions[o])}function U(e,t){void 0!==t.extras&&("object"===r(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,o=t.weights.length;n<o;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var r=t.extras.targetNames;if(e.morphTargetInfluences.length===r.length){e.morphTargetDictionary={};for(n=0,o=r.length;n<o;n++)e.morphTargetDictionary[r[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function N(e){for(var t="",n=Object.keys(e).sort(),o=0,r=n.length;o<r;o++)t+=n[o]+":"+e[n[o]]+";";return t}function B(e,n,r){this.json=e||{},this.extensions=n||{},this.options=r||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new o.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new o.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,n){var r=t.attributes,a=[];function i(t,o){return n.getDependency("accessor",t).then((function(t){e.setAttribute(o,t)}))}for(var s in r){var l=j[s]||s.toLowerCase();l in e.attributes||a.push(i(r[s],l))}if(void 0!==t.indices&&!e.index){var c=n.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));a.push(c)}return U(e,t),function(e,t,n){var r=t.attributes,a=new o.Box3;if(void 0!==r.POSITION){var i=(m=n.json.accessors[r.POSITION]).min,s=m.max;if(void 0!==i&&void 0!==s){a.set(new o.Vector3(i[0],i[1],i[2]),new o.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var c=new o.Vector3,u=new o.Vector3,d=0,h=l.length;d<h;d++){var m,f=l[d];if(void 0!==f.POSITION)i=(m=n.json.accessors[f.POSITION]).min,s=m.max,void 0!==i&&void 0!==s?(u.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),u.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),u.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),c.max(u)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}a.expandByVector(c)}e.boundingBox=a;var p=new o.Sphere;a.getCenter(p.center),p.radius=a.min.distanceTo(a.max)/2,e.boundingSphere=p}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,n),Promise.all(a).then((function(){return void 0!==t.targets?function(e,t,n){for(var o=!1,r=!1,a=0,i=t.length;a<i&&(void 0!==(c=t[a]).POSITION&&(o=!0),void 0!==c.NORMAL&&(r=!0),!o||!r);a++);if(!o&&!r)return Promise.resolve(e);var s=[],l=[];for(a=0,i=t.length;a<i;a++){var c=t[a];if(o){var u=void 0!==c.POSITION?n.getDependency("accessor",c.POSITION):e.attributes.position;s.push(u)}r&&(u=void 0!==c.NORMAL?n.getDependency("accessor",c.NORMAL):e.attributes.normal,l.push(u))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var n=t[0],a=t[1];return o&&(e.morphAttributes.position=n),r&&(e.morphAttributes.normal=a),e.morphTargetsRelative=!0,e}))}(e,t.targets,n):e}))}function V(e,t){var n=e.getIndex();if(null===n){var r=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)r.push(i);e.setIndex(r),n=e.getIndex()}var s=n.count-2,l=[];if(t===o.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c}return B.prototype.parse=function(e,t){var n=this,o=this.json,r=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var a={scene:t[0][o.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:o.asset,parser:n,userData:{}};H(r,a,o),U(a,o),e(a)})).catch(t)},B.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],o={},r={},a=0,i=t.length;a<i;a++)for(var s=t[a].joints,l=0,c=s.length;l<c;l++)e[s[l]].isBone=!0;for(var u=0,d=e.length;u<d;u++){var h=e[u];void 0!==h.mesh&&(void 0===o[h.mesh]&&(o[h.mesh]=r[h.mesh]=0),o[h.mesh]++,void 0!==h.skin&&(n[h.mesh].isSkinnedMesh=!0))}this.json.meshReferences=o,this.json.meshUses=r},B.prototype.getDependency=function(e,t){var o=e+":"+t,r=this.cache.get(o);if(!r){switch(e){case"scene":r=this.loadScene(t);break;case"node":r=this.loadNode(t);break;case"mesh":r=this.loadMesh(t);break;case"accessor":r=this.loadAccessor(t);break;case"bufferView":r=this.loadBufferView(t);break;case"buffer":r=this.loadBuffer(t);break;case"material":r=this.loadMaterial(t);break;case"texture":r=this.loadTexture(t);break;case"skin":r=this.loadSkin(t);break;case"animation":r=this.loadAnimation(t);break;case"camera":r=this.loadCamera(t);break;case"light":r=this.extensions[n.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(o,r)}return r},B.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,o=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(o.map((function(t,o){return n.getDependency(e,o)}))),this.cache.add(e,t)}return t},B.prototype.loadBuffer=function(e){var t=this.json.buffers[e],o=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);var r=this.options;return new Promise((function(e,n){o.load(F(t.uri,r.path),e,void 0,(function(){n(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},B.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var n=t.byteLength||0,o=t.byteOffset||0;return e.slice(o,o+n)}))},B.prototype.loadAccessor=function(e){var t=this,n=this.json,r=this.json.accessors[e];if(void 0===r.bufferView&&void 0===r.sparse)return Promise.resolve(null);var a=[];return void 0!==r.bufferView?a.push(this.getDependency("bufferView",r.bufferView)):a.push(null),void 0!==r.sparse&&(a.push(this.getDependency("bufferView",r.sparse.indices.bufferView)),a.push(this.getDependency("bufferView",r.sparse.values.bufferView))),Promise.all(a).then((function(e){var a,i,s=e[0],l=A[r.type],c=x[r.componentType],u=c.BYTES_PER_ELEMENT,d=u*l,h=r.byteOffset||0,m=void 0!==r.bufferView?n.bufferViews[r.bufferView].byteStride:void 0,f=!0===r.normalized;if(m&&m!==d){var p=Math.floor(h/m),g="InterleavedBuffer:"+r.bufferView+":"+r.componentType+":"+p+":"+r.count,v=t.cache.get(g);v||(a=new c(s,p*m,r.count*m/u),v=new o.InterleavedBuffer(a,m/u),t.cache.add(g,v)),i=new o.InterleavedBufferAttribute(v,l,h%m/u,f)}else a=null===s?new c(r.count*l):new c(s,h,r.count*l),i=new o.BufferAttribute(a,l,f);if(void 0!==r.sparse){var b=A.SCALAR,y=x[r.sparse.indices.componentType],w=r.sparse.indices.byteOffset||0,L=r.sparse.values.byteOffset||0,E=new y(e[1],w,r.sparse.count*b),T=new c(e[2],L,r.sparse.count*l);null!==s&&(i=new o.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var S=0,M=E.length;S<M;S++){var R=E[S];if(i.setX(R,T[S*l]),l>=2&&i.setY(R,T[S*l+1]),l>=3&&i.setZ(R,T[S*l+2]),l>=4&&i.setW(R,T[S*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},B.prototype.loadTexture=function(e){var t,r=this,a=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,c=a.textures[e],u=c.extensions||{},d=(t=u[n.MSFT_TEXTURE_DDS]?a.images[u[n.MSFT_TEXTURE_DDS].source]:a.images[c.source]).uri,h=!1;return void 0!==t.bufferView&&(d=r.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var n=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(n)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=u[n.MSFT_TEXTURE_DDS]?r.extensions[n.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(n,o){t.load(F(e,i.path),n,void 0,o)}))})).then((function(e){!0===h&&l.revokeObjectURL(d),e.flipY=!1,c.name&&(e.name=c.name),t.mimeType in I&&(e.format=I[t.mimeType]);var n=(a.samplers||{})[c.sampler]||{};return e.magFilter=R[n.magFilter]||o.LinearFilter,e.minFilter=R[n.minFilter]||o.LinearMipmapLinearFilter,e.wrapS=C[n.wrapS]||o.RepeatWrapping,e.wrapT=C[n.wrapT]||o.RepeatWrapping,e}))},B.prototype.assignTexture=function(e,t,r){var a=this;return this.getDependency("texture",r.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=o.RGBFormat}if(void 0===r.texCoord||0==r.texCoord||"aoMap"===t&&1==r.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+r.texCoord+" for texture "+t+" not yet supported."),a.extensions[n.KHR_TEXTURE_TRANSFORM]){var s=void 0!==r.extensions?r.extensions[n.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=a.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},B.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,r=void 0!==t.attributes.tangent,a=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,c=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+n.uuid,d=this.cache.get(u);d||(d=new o.PointsMaterial,o.Material.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(u,d)),n=d}else if(e.isLine){u="LineBasicMaterial:"+n.uuid;var h=this.cache.get(u);h||(h=new o.LineBasicMaterial,o.Material.prototype.copy.call(h,n),h.color.copy(n.color),this.cache.add(u,h)),n=h}if(r||a||i||s||l){u="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),s&&(u+="skinning:"),r&&(u+="vertex-tangents:"),a&&(u+="vertex-colors:"),i&&(u+="flat-shading:"),l&&(u+="morph-targets:"),c&&(u+="morph-normals:");var m=this.cache.get(u);m||(m=n.clone(),s&&(m.skinning=!0),r&&(m.vertexTangents=!0),a&&(m.vertexColors=!0),i&&(m.flatShading=!0),l&&(m.morphTargets=!0),c&&(m.morphNormals=!0),this.cache.add(u,m)),n=m}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),n.normalScale&&!r&&(n.normalScale.y=-n.normalScale.y),n.clearcoatNormalScale&&!r&&(n.clearcoatNormalScale.y=-n.clearcoatNormalScale.y),e.material=n},B.prototype.loadMaterial=function(e){var t,r=this,a=this.json,i=this.extensions,s=a.materials[e],l={},c=s.extensions||{},u=[];if(c[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),u.push(d.extendParams(l,s,r))}else if(c[n.KHR_MATERIALS_UNLIT]){var h=i[n.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),u.push(h.extendParams(l,s,r))}else{t=o.MeshStandardMaterial;var m=s.pbrMetallicRoughness||{};if(l.color=new o.Color(1,1,1),l.opacity=1,Array.isArray(m.baseColorFactor)){var f=m.baseColorFactor;l.color.fromArray(f),l.opacity=f[3]}void 0!==m.baseColorTexture&&u.push(r.assignTexture(l,"map",m.baseColorTexture)),l.metalness=void 0!==m.metallicFactor?m.metallicFactor:1,l.roughness=void 0!==m.roughnessFactor?m.roughnessFactor:1,void 0!==m.metallicRoughnessTexture&&(u.push(r.assignTexture(l,"metalnessMap",m.metallicRoughnessTexture)),u.push(r.assignTexture(l,"roughnessMap",m.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=o.DoubleSide);var g=s.alphaMode||O;if(g===D?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===k&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==o.MeshBasicMaterial&&(u.push(r.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new o.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==o.MeshBasicMaterial&&(u.push(r.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==o.MeshBasicMaterial&&(l.emissive=(new o.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==o.MeshBasicMaterial&&u.push(r.assignTexture(l,"emissiveMap",s.emissiveTexture)),c[n.KHR_MATERIALS_CLEARCOAT]){var v=i[n.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),u.push(v.extendParams(l,{extensions:c},r))}return Promise.all(u).then((function(){var e;return e=t===p?i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=o.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=o.sRGBEncoding),U(e,s),s.extensions&&H(i,e,s),e}))},B.prototype.loadGeometries=function(e){var t=this,r=this.extensions,a=this.primitiveCache;function i(e){return r[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(n){return z(n,e,t)}))}for(var s,l,c=[],u=0,d=e.length;u<d;u++){var h,m=e[u],f=(l=void 0,(l=(s=m).extensions&&s.extensions[n.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+N(l.attributes):s.indices+":"+N(s.attributes)+":"+s.mode),p=a[f];if(p)c.push(p.promise);else h=m.extensions&&m.extensions[n.KHR_DRACO_MESH_COMPRESSION]?i(m):z(new o.BufferGeometry,m,t),a[f]={primitive:m,promise:h},c.push(h)}return Promise.all(c)},B.prototype.loadMesh=function(e){for(var t,n=this,r=this.json.meshes[e],a=r.primitives,i=[],s=0,l=a.length;s<l;s++){var c=void 0===a[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new o.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:o.FrontSide})),t.DefaultMaterial):this.getDependency("material",a[s].material);i.push(c)}return i.push(n.loadGeometries(a)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],c=0,u=s.length;c<u;c++){var d,h=s[c],m=a[c],f=i[c];if(m.mode===T||m.mode===S||m.mode===M||void 0===m.mode)!0!==(d=!0===r.isSkinnedMesh?new o.SkinnedMesh(h,f):new o.Mesh(h,f)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),m.mode===S?d.geometry=V(d.geometry,o.TriangleStripDrawMode):m.mode===M&&(d.geometry=V(d.geometry,o.TriangleFanDrawMode));else if(m.mode===w)d=new o.LineSegments(h,f);else if(m.mode===E)d=new o.Line(h,f);else if(m.mode===L)d=new o.LineLoop(h,f);else{if(m.mode!==y)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+m.mode);d=new o.Points(h,f)}Object.keys(d.geometry.morphAttributes).length>0&&G(d,r),d.name=r.name||"mesh_"+e,s.length>1&&(d.name+="_"+c),U(d,r),n.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var p=new o.Group;for(c=0,u=l.length;c<u;c++)p.add(l[c]);return p}))},B.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],r=n[n.type];if(r)return"perspective"===n.type?t=new o.PerspectiveCamera(o.MathUtils.radToDeg(r.yfov),r.aspectRatio||1,r.znear||1,r.zfar||2e6):"orthographic"===n.type&&(t=new o.OrthographicCamera(-r.xmag,r.xmag,r.ymag,-r.ymag,r.znear,r.zfar)),n.name&&(t.name=n.name),U(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},B.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return n.inverseBindMatrices=e,n}))},B.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],r=[],a=[],i=[],s=[],l=0,c=t.channels.length;l<c;l++){var u=t.channels[l],d=t.samplers[u.sampler],h=u.target,m=void 0!==h.node?h.node:h.id,f=void 0!==t.parameters?t.parameters[d.input]:d.input,p=void 0!==t.parameters?t.parameters[d.output]:d.output;n.push(this.getDependency("node",m)),r.push(this.getDependency("accessor",f)),a.push(this.getDependency("accessor",p)),i.push(d),s.push(h)}return Promise.all([Promise.all(n),Promise.all(r),Promise.all(a),Promise.all(i),Promise.all(s)]).then((function(n){for(var r=n[0],a=n[1],i=n[2],s=n[3],l=n[4],c=[],u=0,d=r.length;u<d;u++){var h=r[u],m=a[u],f=i[u],p=s[u],g=l[u];if(void 0!==h){var v;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,P[g.path]){case P.weights:v=o.NumberKeyframeTrack;break;case P.rotation:v=o.QuaternionKeyframeTrack;break;case P.position:case P.scale:default:v=o.VectorKeyframeTrack}var y=h.name?h.name:h.uuid,w=void 0!==p.interpolation?_[p.interpolation]:o.InterpolateLinear,L=[];P[g.path]===P.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&L.push(e.name?e.name:e.uuid)})):L.push(y);var E=f.array;if(f.normalized){var T;if(E.constructor===Int8Array)T=1/127;else if(E.constructor===Uint8Array)T=1/255;else if(E.constructor==Int16Array)T=1/32767;else{if(E.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");T=1/65535}for(var S=new Float32Array(E.length),M=0,x=E.length;M<x;M++)S[M]=E[M]*T;E=S}for(M=0,x=L.length;M<x;M++){var R=new v(L[M]+"."+P[g.path],m.array,E,w);"CUBICSPLINE"===p.interpolation&&(R.createInterpolant=function(e){return new b(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(R)}}}var C=t.name?t.name:"animation_"+e;return new o.AnimationClip(C,void 0,c)}))},B.prototype.loadNode=function(e){var t,r=this.json,a=this.extensions,i=this,s=r.meshReferences,l=r.meshUses,c=r.nodes[e];return(t=[],void 0!==c.mesh&&t.push(i.getDependency("mesh",c.mesh).then((function(e){var t;if(s[c.mesh]>1){var n=l[c.mesh]++;(t=e.clone()).name+="_instance_"+n}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,n=c.weights.length;t<n;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(i.getDependency("camera",c.camera)),c.extensions&&c.extensions[n.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[n.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",c.extensions[n.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new o.Bone:e.length>1?new o.Group:1===e.length?e[0]:new o.Object3D)!==e[0])for(var n=0,r=e.length;n<r;n++)t.add(e[n]);if(c.name&&(t.userData.name=c.name,t.name=o.PropertyBinding.sanitizeNodeName(c.name)),U(t,c),c.extensions&&H(a,t,c),void 0!==c.matrix){var i=new o.Matrix4;i.fromArray(c.matrix),t.applyMatrix4(i)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},B.prototype.loadScene=function(){function e(t,n,r,a){var i=r.nodes[t];return a.getDependency("node",t).then((function(e){return void 0===i.skin?e:a.getDependency("skin",i.skin).then((function(e){for(var n=[],o=0,r=(t=e).joints.length;o<r;o++)n.push(a.getDependency("node",t.joints[o]));return Promise.all(n)})).then((function(n){return e.traverse((function(e){if(e.isMesh){for(var r=[],a=[],i=0,s=n.length;i<s;i++){var l=n[i];if(l){r.push(l);var c=new o.Matrix4;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*i),a.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new o.Skeleton(r,a),e.matrixWorld)}})),e}));var t})).then((function(t){n.add(t);var o=[];if(i.children)for(var s=i.children,l=0,c=s.length;l<c;l++){var u=s[l];o.push(e(u,t,r,a))}return Promise.all(o)}))}return function(t){var n=this.json,r=this.extensions,a=this.json.scenes[t],i=new o.Group;a.name&&(i.name=a.name),U(i,a),a.extensions&&H(r,i,a);for(var s=a.nodes||[],l=[],c=0,u=s.length;c<u;c++)l.push(e(s[c],i,n,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/managers/datGUI.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/js/data/config.js");function r(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,n,a;return t=e,(n=[{key:"load",value:function(e,t){var n=this;this.model=e.model,this.meshHelper=e.meshHelper;var a=this.gui.addFolder("Camera"),i=a.add(o.default.camera,"fov",0,180).name("Camera FOV");i.onChange((function(e){n.controls.enableRotate=!1,n.camera.fov=e})),i.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0}));var s=a.add(o.default.camera,"aspect",0,4).name("Camera Aspect");s.onChange((function(e){n.controls.enableRotate=!1,n.camera.aspect=e})),s.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0})),a.addColor(o.default.fog,"color").name("Fog Color").onChange((function(e){n.scene.fog.color.setHex(e)}));var l=a.add(o.default.fog,"near",0,.01).name("Fog Near");l.onChange((function(e){n.controls.enableRotate=!1,n.scene.fog.density=e})),l.onFinishChange((function(){n.controls.enableRotate=!0}));var c=this.gui.addFolder("Controls");c.add(o.default.controls,"autoRotate").name("Auto Rotate").onChange((function(e){n.controls.autoRotate=e}));var u=c.add(o.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");u.onChange((function(e){n.controls.enableRotate=!1,n.controls.autoRotateSpeed=e})),u.onFinishChange((function(){n.controls.enableRotate=!0})),this.gui.addFolder("Model").add(o.default.model,"type",r(o.default.model.initialTypes)).name("Select Model").onChange((function(e){e&&(o.default.mesh.enableHelper&&n.meshHelper.disable(),o.default.model.selected=o.default.model.initialTypes.indexOf(e),n.unload(),n.model.unload(),n.model.load(e))}));var d=this.gui.addFolder("Mesh");d.add(o.default.mesh,"enableHelper",!0).name("Enable Helpers").onChange((function(e){e?n.meshHelper.enable():n.meshHelper.disable()})),d.add(o.default.mesh,"translucent",!0).name("Translucent").onChange((function(e){e?(t.material.transparent=!0,t.material.opacity=.5):t.material.opacity=1})),d.add(o.default.mesh,"wireframe",!0).name("Wireframe").onChange((function(e){t.material.wireframe=e}));var h=this.gui.addFolder("Ambient Light");h.add(o.default.ambientLight,"enabled").name("Enabled").onChange((function(e){n.light.ambientLight.visible=e})),h.addColor(o.default.ambientLight,"color").name("Color").onChange((function(e){n.light.ambientLight.color.setHex(e)}));var m=this.gui.addFolder("Directional Light");m.add(o.default.directionalLight,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.visible=e})),m.addColor(o.default.directionalLight,"color").name("Color").onChange((function(e){n.light.directionalLight.color.setHex(e)}));var f=m.add(o.default.directionalLight,"intensity",0,2).name("Intensity");f.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.intensity=e})),f.onFinishChange((function(){n.controls.enableRotate=!0}));var p=m.add(o.default.directionalLight,"x",-1e3,1e3).name("Position X");p.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.x=e})),p.onFinishChange((function(){n.controls.enableRotate=!0}));var g=m.add(o.default.directionalLight,"y",-1e3,1e3).name("Position Y");g.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.y=e})),g.onFinishChange((function(){n.controls.enableRotate=!0}));var v=m.add(o.default.directionalLight,"z",-1e3,1e3).name("Position Z");v.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.z=e})),v.onFinishChange((function(){n.controls.enableRotate=!0}));var b=this.gui.addFolder("Shadow Map");b.add(o.default.shadow,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.castShadow=e})),b.add(o.default.shadow,"helperEnabled").name("Helper Enabled").onChange((function(e){n.light.directionalLightHelper.visible=e}));var y=b.add(o.default.shadow,"near",0,400).name("Near");y.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.near=e})),y.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var w=b.add(o.default.shadow,"far",0,1200).name("Far");w.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.far=e})),w.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var L=b.add(o.default.shadow,"top",-400,400).name("Top");L.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.top=e})),L.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var E=b.add(o.default.shadow,"right",-400,400).name("Right");E.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.right=e})),E.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var T=b.add(o.default.shadow,"bottom",-400,400).name("Bottom");T.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.bottom=e})),T.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var S=b.add(o.default.shadow,"left",-400,400).name("Left");S.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.left=e})),S.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var M=b.add(o.default.shadow,"bias",-1e-5,1).name("Bias");M.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.bias=e})),M.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var x=this.gui.addFolder("Point Light");x.add(o.default.pointLight,"enabled").name("Enabled").onChange((function(e){n.light.pointLight.visible=e})),x.addColor(o.default.pointLight,"color").name("Color").onChange((function(e){n.light.pointLight.color.setHex(e)}));var R=x.add(o.default.pointLight,"intensity",0,2).name("Intensity");R.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.intensity=e})),R.onFinishChange((function(){n.controls.enableRotate=!0}));var C=x.add(o.default.pointLight,"distance",0,1e3).name("Distance");C.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.distance=e})),C.onFinishChange((function(){n.controls.enableRotate=!0}));var A=x.add(o.default.pointLight,"x",-1e3,1e3).name("Position X");A.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.x=e})),A.onFinishChange((function(){n.controls.enableRotate=!0}));var j=x.add(o.default.pointLight,"y",-1e3,1e3).name("Position Y");j.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.y=e})),j.onFinishChange((function(){n.controls.enableRotate=!0}));var P=x.add(o.default.pointLight,"z",-1e3,1e3).name("Position Z");P.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.z=e})),P.onFinishChange((function(){n.controls.enableRotate=!0}));var _=this.gui.addFolder("Hemi Light");_.add(o.default.hemiLight,"enabled").name("Enabled").onChange((function(e){n.light.hemiLight.visible=e})),_.addColor(o.default.hemiLight,"color").name("Color").onChange((function(e){n.light.hemiLight.color.setHex(e)})),_.addColor(o.default.hemiLight,"groundColor").name("ground Color").onChange((function(e){n.light.hemiLight.groundColor.setHex(e)}));var O=_.add(o.default.hemiLight,"intensity",0,2).name("Intensity");O.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.intensity=e})),O.onFinishChange((function(){n.controls.enableRotate=!0}));var k=_.add(o.default.hemiLight,"x",-1e3,1e3).name("Position X");k.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.x=e})),k.onFinishChange((function(){n.controls.enableRotate=!0}));var D=_.add(o.default.hemiLight,"y",-500,1e3).name("Position Y");D.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.y=e})),D.onFinishChange((function(){n.controls.enableRotate=!0}));var I=_.add(o.default.hemiLight,"z",-1e3,1e3).name("Position Z");I.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.z=e})),I.onFinishChange((function(){n.controls.enableRotate=!0}))}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&i(t.prototype,n),a&&i(t,a),e}()},"./src/js/app/managers/interaction.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./src/js/utils/keyboard.js"),r=n("./src/js/utils/helpers.js"),a=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var s=function(){function e(t,n,a,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=n,this.camera=a,this.controls=i,this.timeout=null,this.keyboard=new o.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return r.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,n,s;return t=e,(n=[{key:"onMouseOver",value:function(e){e.preventDefault(),a.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),a.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){a.default.isMouseMoving=!1}),200),a.default.isMouseMoving=!0}}])&&i(t.prototype,n),s&&i(t,s),e}()},"./src/js/app/model/model.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/components/material.js"),a=n("./src/js/utils/helpers.js"),i=n("./src/js/utils/bufferGeometryUtils.js"),s=n("./src/js/app/loaders/GLTFLoader.js"),l=n("./src/js/data/config.js");function c(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var u=function(){function e(t,n,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=o,this.manager=n,this.obj=null,this.ref=null}var t,n,u;return t=e,(n=[{key:"load",value:function(e){var t=this;switch(e){case"gltf":new s.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){var n,r=e.scene;l.default.shadow.enabled&&r.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,n=e)})),t.obj=n,i.BufferGeometryUtils.computeTangents(n.geometry);var a=new o.Group;a.scale.multiplyScalar(.25),t.scene.add(a),t.ref=a,a.updateMatrixWorld(!0),a.add(n),t.scene.add(r)}),a.default.logProgress(),a.default.logError());break;case"object":new o.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){e.traverse((function(e){if(e instanceof o.Mesh){var n=new r.default(16777215).standard;n.map=t.textures.UV,e.material=n,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),t.obj=e,t.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),t.scene.add(e)}),a.default.logProgress(),a.default.logError())}}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&c(t.prototype,n),u&&c(t,u),e}()},"./src/js/app/model/texture.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/three/build/three.module.js"),r=n("./node_modules/es6-promise/dist/es6-promise.js"),a=n("./src/js/utils/helpers.js"),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,n,l;return t=e,(n=[{key:"load",value:function(){var e=this,t=new o.TextureLoader,n=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new r.Promise((function(r,i){t.load(e.image,(function(t){t.anisotropy=n;var a={};a[e.name]=t,a[e.name]instanceof o.Texture&&r(a)}),a.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),r.Promise.all(l).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]]}),(function(e){return console.log(e)}))}}])&&s(t.prototype,n),l&&s(t,l),e}()},"./src/js/data/config.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BufferGeometryUtils:()=>r});var o=n("./node_modules/three/build/three.module.js"),r={computeTangents:function(e){var t=e.index,n=e.attributes;if(null!==t&&void 0!==n.position&&void 0!==n.normal&&void 0!==n.uv){var r=t.array,a=n.position.array,i=n.normal.array,s=n.uv.array,l=a.length/3;void 0===n.tangent&&e.setAttribute("tangent",new o.BufferAttribute(new Float32Array(4*l),4));for(var c=n.tangent.array,u=[],d=[],h=0;h<l;h++)u[h]=new o.Vector3,d[h]=new o.Vector3;var m=new o.Vector3,f=new o.Vector3,p=new o.Vector3,g=new o.Vector2,v=new o.Vector2,b=new o.Vector2,y=new o.Vector3,w=new o.Vector3,L=e.groups;0===L.length&&(L=[{start:0,count:r.length}]);h=0;for(var E=L.length;h<E;++h)for(var T=O=(_=L[h]).start,S=O+_.count;T<S;T+=3)k(r[T+0],r[T+1],r[T+2]);var M,x,R,C=new o.Vector3,A=new o.Vector3,j=new o.Vector3,P=new o.Vector3;for(h=0,E=L.length;h<E;++h){var _,O;for(T=O=(_=L[h]).start,S=O+_.count;T<S;T+=3)D(r[T+0]),D(r[T+1]),D(r[T+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function k(e,t,n){m.fromArray(a,3*e),f.fromArray(a,3*t),p.fromArray(a,3*n),g.fromArray(s,2*e),v.fromArray(s,2*t),b.fromArray(s,2*n),f.sub(m),p.sub(m),v.sub(g),b.sub(g);var o=1/(v.x*b.y-b.x*v.y);isFinite(o)&&(y.copy(f).multiplyScalar(b.y).addScaledVector(p,-v.y).multiplyScalar(o),w.copy(p).multiplyScalar(v.x).addScaledVector(f,-b.x).multiplyScalar(o),u[e].add(y),u[t].add(y),u[n].add(y),d[e].add(w),d[t].add(w),d[n].add(w))}function D(e){j.fromArray(i,3*e),P.copy(j),x=u[e],C.copy(x),C.sub(j.multiplyScalar(j.dot(x))).normalize(),A.crossVectors(P,x),R=A.dot(d[e]),M=R<0?-1:1,c[4*e]=C.x,c[4*e+1]=C.y,c[4*e+2]=C.z,c[4*e+3]=M}},mergeBufferGeometries:function(e,t){for(var n=null!==e[0].index,r=new Set(Object.keys(e[0].attributes)),a=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,c=new o.BufferGeometry,u=0,d=0;d<e.length;++d){var h=e[d],m=0;if(n!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var f in h.attributes){if(!r.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+f+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[f]&&(i[f]=[]),i[f].push(h.attributes[f]),m++}if(m!==r.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var f in h.morphAttributes){if(!a.has(f))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[f]&&(s[f]=[]),s[f].push(h.morphAttributes[f])}if(c.userData.mergedUserData=c.userData.mergedUserData||[],c.userData.mergedUserData.push(h.userData),t){var p;if(n)p=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;p=h.attributes.position.count}c.addGroup(u,p,d),u+=p}}if(n){var g=0,v=[];for(d=0;d<e.length;++d){for(var b=e[d].index,y=0;y<b.count;++y)v.push(b.getX(y)+g);g+=e[d].attributes.position.count}c.setIndex(v)}for(var f in i){var w=this.mergeBufferAttributes(i[f]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" attribute."),null;c.setAttribute(f,w)}for(var f in s){var L=s[f][0].length;if(0===L)break;c.morphAttributes=c.morphAttributes||{},c.morphAttributes[f]=[];for(d=0;d<L;++d){var E=[];for(y=0;y<s[f].length;++y)E.push(s[f][y][d]);var T=this.mergeBufferAttributes(E);if(!T)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+f+" morphAttribute."),null;c.morphAttributes[f].push(T)}}return c},mergeBufferAttributes:function(e){for(var t,n,r,a=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===n&&(n=s.itemSize),n!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===r&&(r=s.normalized),r!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;a+=s.array.length}var l=new t(a),c=0;for(i=0;i<e.length;++i)l.set(e[i].array,c),c+=e[i].array.length;return new o.BufferAttribute(l,n,r)},interleaveAttributes:function(e){for(var t,n=0,r=0,a=0,i=e.length;a<i;++a){var s=e[a];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;n+=s.array.length,r+=s.itemSize}var l=new o.InterleavedBuffer(new t(n),r),c=0,u=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],m=0;for(i=e.length;m<i;m++){var f=(s=e[m]).itemSize,p=s.count,g=new o.InterleavedBufferAttribute(l,f,c,s.normalized);u.push(g),c+=f;for(var v=0;v<p;v++)for(var b=0;b<f;b++)g[h[b]](v,s[d[b]](v))}return u},estimateBytesUsed:function(e){var t=0;for(var n in e.attributes){var o=e.getAttribute(n);t+=o.count*o.itemSize*o.array.BYTES_PER_ELEMENT}var r=e.getIndex();return t+=r?r.count*r.itemSize*r.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var n={},r=e.getIndex(),a=e.getAttribute("position"),i=r?r.count:a.count,s=0,l=Object.keys(e.attributes),c={},u={},d=[],h=["getX","getY","getZ","getW"],m=0,f=l.length;m<f;m++){c[w=l[m]]=[],(S=e.morphAttributes[w])&&(u[w]=new Array(S.length).fill().map((function(){return[]})))}var p=Math.log10(1/t),g=Math.pow(10,p);for(m=0;m<i;m++){var v=r?r.getX(m):m,b="",y=0;for(f=l.length;y<f;y++)for(var w=l[y],L=(T=e.getAttribute(w)).itemSize,E=0;E<L;E++)b+="".concat(~~(T[h[E]](v)*g),",");if(b in n)d.push(n[b]);else{for(y=0,f=l.length;y<f;y++){w=l[y];var T=e.getAttribute(w),S=e.morphAttributes[w],M=(L=T.itemSize,c[w]),x=u[w];for(E=0;E<L;E++){var R=h[E];if(M.push(T[R](v)),S)for(var C=0,A=S.length;C<A;C++)x[C].push(S[C][R](v))}}n[b]=s,d.push(s),s++}}var j=e.clone();for(m=0,f=l.length;m<f;m++){w=l[m];var P=e.getAttribute(w),_=new P.array.constructor(c[w]);T=new o.BufferAttribute(_,P.itemSize,P.normalized);if(j.setAttribute(w,T),w in u)for(y=0;y<u[w].length;y++){var O=e.morphAttributes[w][y],k=(_=new O.array.constructor(u[w][y]),new o.BufferAttribute(_,O.itemSize,O.normalized));j.morphAttributes[w][y]=k}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===o.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===o.TriangleFanDrawMode||t===o.TriangleStripDrawMode){var n=e.getIndex();if(null===n){var r=[],a=e.getAttribute("position");if(void 0===a)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<a.count;i++)r.push(i);e.setIndex(r),n=e.getIndex()}var s=n.count-2,l=[];if(t===o.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c.clearGroups(),c}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,o;t=void 0!==(e=e||{}).parent?e.parent:document.body,n=void 0!==e.id?e.id:"oldie",(o=this.getWebGLErrorMessage()).id=n,t.appendChild(o)}}},"./src/js/utils/helpers.js":(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t),n.d(t,{default:()=>r});var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"throttle",value:function(e,t,n){var o,r;return t||(t=250),function(){var a=n||this,i=+new Date,s=arguments;o&&i<o+t?(clearTimeout(r),r=setTimeout((function(){o=i,e.apply(a,s)}),t)):(o=i,e.apply(a,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,n){return function(o){e[t]=n[o],e.needsUpdate=!0}}}],(n=null)&&o(t.prototype,n),r&&o(t,r),e}()},"./src/js/utils/keyboard.js":(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t),n.d(t,{default:()=>a});var r={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},a=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return n.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return n.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return n.onBlur}),!1)}var t,n,a;return t=e,(n=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),n=0;n<t.length;n++){var o=t[n],a=!1;if(a=-1!=Object.keys(r).indexOf(o)?this.keyCodes[r[o]]:this.keyCodes[o.toUpperCase().charCodeAt(0)],!a)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var n=r,o=Object.keys(n),a=t.split("+"),i=0;i<a.length;i++){var s=a[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==o.indexOf(s)?l=e.keyCode===n[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&o(t.prototype,n),a&&o(t,a),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function n(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var n,o,r,a,i,s,l,c,u=this,d=1e-6,h=0,m=0,f=1,p=new e.Vector3,g=!1;this.getPolarAngle=function(){return o},this.getAzimuthalAngle=function(){return n},this.rotateLeft=function(e){m-=e},this.rotateUp=function(e){h-=e},this.panLeft=(r=new e.Vector3,function(e){var t=this.object.matrix.elements;r.set(t[0],t[1],t[2]),r.multiplyScalar(-e),p.add(r)}),this.panUp=function(){var t=new e.Vector3;return function(e){var n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),p.add(t)}}(),this.pan=function(t,n,o,r){if(u.object instanceof e.PerspectiveCamera){var a=u.object.position.clone().sub(u.target).length();a*=Math.tan(u.object.fov/2*Math.PI/180),u.panLeft(2*t*a/r),u.panUp(2*n*a/r)}else u.object instanceof e.OrthographicCamera?(u.panLeft(t*(u.object.right-u.object.left)/o),u.panUp(n*(u.object.top-u.object.bottom)/r)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){u.object instanceof e.PerspectiveCamera?f/=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){u.object instanceof e.PerspectiveCamera?f*=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(a=new e.Vector3,i=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),s=i.clone().inverse(),l=new e.Vector3,c=new e.Quaternion,function(){var e=this.object.position;a.copy(e).sub(this.target),a.applyQuaternion(i),n=Math.atan2(a.x,a.z),o=Math.atan2(Math.sqrt(a.x*a.x+a.z*a.z),a.y),n+=m,o+=h,n=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,n)),o=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,o)),o=Math.max(d,Math.min(Math.PI-d,o));var t=a.length()*f;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(p),a.x=t*Math.sin(o)*Math.sin(n),a.y=t*Math.cos(o),a.z=t*Math.sin(o)*Math.cos(n),a.applyQuaternion(s),e.copy(this.target).add(a),this.object.lookAt(this.target),!0===this.enableDamping?(m*=1-this.dampingFactor,h*=1-this.dampingFactor):(m=0,h=0),f=1,p.set(0,0,0),!!(g||l.distanceToSquared(this.object.position)>d||8*(1-c.dot(this.object.quaternion))>d)&&(l.copy(this.object.position),c.copy(this.object.quaternion),g=!1,!0)})}function o(t,o){var r=new n(t);this.domElement=void 0!==o?o:document,Object.defineProperty(this,"constraint",{get:function(){return r}}),this.getPolarAngle=function(){return r.getPolarAngle()},this.getAzimuthalAngle=function(){return r.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var a=this,i=new e.Vector2,s=new e.Vector2,l=new e.Vector2,c=new e.Vector2,u=new e.Vector2,d=new e.Vector2,h=new e.Vector2,m=new e.Vector2,f=new e.Vector2,p=-1,g=0,v=1,b=2,y=3,w=4,L=5,E=p;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var T={type:"change"},S={type:"start"},M={type:"end"};function x(e,t){var n=a.domElement===document?a.domElement.body:a.domElement;r.pan(e,t,n.clientWidth,n.clientHeight)}function R(){return Math.pow(.95,a.zoomSpeed)}function C(e){if(!1!==a.enabled){if(e.preventDefault(),e.button===a.mouseButtons.ORBIT){if(!1===a.enableRotate)return;E=g,i.set(e.clientX,e.clientY)}else if(e.button===a.mouseButtons.ZOOM){if(!1===a.enableZoom)return;E=v,h.set(e.clientX,e.clientY)}else if(e.button===a.mouseButtons.PAN){if(!1===a.enablePan)return;E=b,c.set(e.clientX,e.clientY)}E!==p&&(document.addEventListener("mousemove",A,!1),document.addEventListener("mouseup",j,!1),a.dispatchEvent(S))}}function A(e){if(!1!==a.enabled){e.preventDefault();var t=a.domElement===document?a.domElement.body:a.domElement;if(E===g){if(!1===a.enableRotate)return;s.set(e.clientX,e.clientY),l.subVectors(s,i),r.rotateLeft(2*Math.PI*l.x/t.clientWidth*a.rotateSpeed),r.rotateUp(2*Math.PI*l.y/t.clientHeight*a.rotateSpeed),i.copy(s)}else if(E===v){if(!1===a.enableZoom)return;m.set(e.clientX,e.clientY),f.subVectors(m,h),f.y>0?r.dollyIn(R()):f.y<0&&r.dollyOut(R()),h.copy(m)}else if(E===b){if(!1===a.enablePan)return;u.set(e.clientX,e.clientY),d.subVectors(u,c),x(d.x,d.y),c.copy(u)}E!==p&&a.update()}}function j(){!1!==a.enabled&&(document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",j,!1),a.dispatchEvent(M),E=p)}function P(e){if(!1!==a.enabled&&!1!==a.enableZoom&&E===p){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?r.dollyOut(R()):t<0&&r.dollyIn(R()),a.update(),a.dispatchEvent(S),a.dispatchEvent(M)}}function _(e){if(!1!==a.enabled&&!1!==a.enableKeys&&!1!==a.enablePan)switch(e.keyCode){case a.keys.UP:x(0,a.keyPanSpeed),a.update();break;case a.keys.BOTTOM:x(0,-a.keyPanSpeed),a.update();break;case a.keys.LEFT:x(a.keyPanSpeed,0),a.update();break;case a.keys.RIGHT:x(-a.keyPanSpeed,0),a.update()}}function O(e){if(!1!==a.enabled){switch(e.touches.length){case 1:if(!1===a.enableRotate)return;E=y,i.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===a.enableZoom)return;E=w;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,o=Math.sqrt(t*t+n*n);h.set(0,o);break;case 3:if(!1===a.enablePan)return;E=L,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:E=p}E!==p&&a.dispatchEvent(S)}}function k(e){if(!1!==a.enabled){e.preventDefault(),e.stopPropagation();var t=a.domElement===document?a.domElement.body:a.domElement;switch(e.touches.length){case 1:if(!1===a.enableRotate)return;if(E!==y)return;s.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(s,i),r.rotateLeft(2*Math.PI*l.x/t.clientWidth*a.rotateSpeed),r.rotateUp(2*Math.PI*l.y/t.clientHeight*a.rotateSpeed),i.copy(s),a.update();break;case 2:if(!1===a.enableZoom)return;if(E!==w)return;var n=e.touches[0].pageX-e.touches[1].pageX,o=e.touches[0].pageY-e.touches[1].pageY,g=Math.sqrt(n*n+o*o);m.set(0,g),f.subVectors(m,h),f.y>0?r.dollyOut(R()):f.y<0&&r.dollyIn(R()),h.copy(m),a.update();break;case 3:if(!1===a.enablePan)return;if(E!==L)return;u.set(e.touches[0].pageX,e.touches[0].pageY),d.subVectors(u,c),x(d.x,d.y),c.copy(u),a.update();break;default:E=p}}}function D(){!1!==a.enabled&&(a.dispatchEvent(M),E=p)}function I(e){e.preventDefault()}this.update=function(){this.autoRotate&&E===p&&r.rotateLeft(2*Math.PI/60/60*a.autoRotateSpeed),!0===r.update()&&this.dispatchEvent(T)},this.reset=function(){E=p,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(T),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",I,!1),this.domElement.removeEventListener("mousedown",C,!1),this.domElement.removeEventListener("mousewheel",P,!1),this.domElement.removeEventListener("MozMousePixelScroll",P,!1),this.domElement.removeEventListener("touchstart",O,!1),this.domElement.removeEventListener("touchend",D,!1),this.domElement.removeEventListener("touchmove",k,!1),document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",j,!1),window.removeEventListener("keydown",_,!1)},this.domElement.addEventListener("contextmenu",I,!1),this.domElement.addEventListener("mousedown",C,!1),this.domElement.addEventListener("mousewheel",P,!1),this.domElement.addEventListener("MozMousePixelScroll",P,!1),this.domElement.addEventListener("touchstart",O,!1),this.domElement.addEventListener("touchend",D,!1),this.domElement.addEventListener("touchmove",k,!1),window.addEventListener("keydown",_,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),o.prototype=Object.create(e.EventDispatcher.prototype),o.prototype.constructor=o,Object.defineProperties(o.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),o}},"./src/js/webrtc/peerConnection.js":(e,t,n)=>{"use strict";function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}n.r(t),n.d(t,{default:()=>r});var r=function(){function e(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.peerConnectionConfig={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:numb.viagenie.ca",credential:"muazkh",username:"webrtc@live.com"},{urls:"turn:192.158.29.39:3478?transport=udp",credential:"JZEOEt2V3Qb0y27GRntt2u2PAYA=",username:"28224511:1379330808"},{urls:"turn:192.158.29.39:3478?transport=tcp",credential:"JZEOEt2V3Qb0y27GRntt2u2PAYA=",username:"28224511:1379330808"}]},this.rtcPeerConnection=this.create(),this.dataChannels=[],this.rtcPeerConnection}var t,n,r;return t=e,(n=[{key:"create",value:function(){try{return location.hostname,this.rtcPeerConnection=new RTCPeerConnection(this.peerConnectionConfig),console.log("Created RTCPeerConnnection: "+this.rtcPeerConnection),this.rtcPeerConnection}catch(e){return console.log("Failed to create PeerConnection, exception: "+e.message),void alert("Cannot create RTCPeerConnection object.")}}},{key:"createDataChannel",value:function(e){if(this.rtcPeerConnection){var t=this.rtcPeerConnection.createDataChannel(e,{ordered:!1,id:room});this.dataChannels.push(t)}}}])&&o(t.prototype,n),r&&o(t,r),e}()},"./src/js/webrtc/videoCall.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{dataChannel:()=>o,isInitiator:()=>r,default:()=>c});var o,r,a=n("./src/js/webrtc/peerConnection.js"),i=n("./src/js/app/game.js");function s(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var o=0,r=function(){};return{s:r,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,s=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw a}}}}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}var c=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=!1;var t,n,l,c=!1,u=!1,d=prompt("Enter room name:"),h=io.connect();function m(e){console.log("Client sending message: ",e),h.emit("message",d,e)}""!==d&&(h.emit("create or join",d),console.log("Attempted to create or join room",d)),h.on("created",(function(e){console.log("Created room "+e),r=!0})),h.on("full",(function(e){console.log("Room "+e+" is full")})),h.on("join",(function(e){console.log("Another peer made a request to join room "+e),console.log("This peer is the initiator of room "+e+"!"),c=!0})),h.on("joined",(function(e){console.log("joined: "+e),c=!0})),h.on("log",(function(e){console.log.apply(console,e)})),h.on("message",(function(e){if(console.log("Client received message:",e),"got user media"===e)g();else if("offer"===e.type)r||u||g(),l.setRemoteDescription(e).then((function(){return console.log("Sending answer to peer."),void l.createAnswer().then(E,T)}));else if("answer"===e.type&&u)l.setRemoteDescription(new RTCSessionDescription(e));else if("candidate"===e.type&&u){var t=new RTCIceCandidate({sdpMLineIndex:e.label,candidate:e.candidate});l.addIceCandidate(t)}else"bye"===e&&u&&(console.log("Session terminated."),S(),r=!0)}));var f=document.querySelector("#localVideo"),p=document.querySelector("#remoteVideo");navigator.mediaDevices.getUserMedia({video:!0,audio:!0}).then((function(e){console.log("Adding local stream."),t=e,f.srcObject=e,m("got user media"),r&&g()})).catch((function(e){alert("getUserMedia() error: "+e.name)}));var g=function(){if(console.log(">>>>>>> maybeStart() ",u,t,c),!u&&void 0!==t&&c){console.log(">>>>>> creating peer connection"),b();var e,n=s(t.getTracks());try{for(n.s();!(e=n.n()).done;){var a=e.value;l.addTrack(a)}}catch(e){n.e(e)}finally{n.f()}(0,i.moveRemoteVideoToScene)(),u=!0,console.log("isInitiator",r),r&&(console.log("CREATING DATACHANNEL gameUpdates"),(o=l.createDataChannel("gameUpdates")).onmessage=x,o.onerror=R,o.onopen=C,o.onclose=C,console.log("CREATED DATACHANNEL gameUpdates"),console.log("Created RTCDataChannel"),console.log("Sending offer to peer"),l.createOffer(E,L))}};window.onpagehide=function(){console.log("Hanging up."),S(),m("bye")};var v=navigator.userAgent.match(/Mac/)&&navigator.maxTouchPoints&&navigator.maxTouchPoints>2?"pagehide":"beforeunload";window.addEventListener(v,(function(e){m("bye")}));var b=function(){(l=new a.default).onicecandidate=y,l.ontrack=w,l.ondatachannel=M};function y(e){console.log("icecandidate event: ",e),e.candidate?m({type:"candidate",label:e.candidate.sdpMLineIndex,id:e.candidate.sdpMid,candidate:e.candidate.candidate}):console.log("End of candidates.")}function w(e){e.streams&&e.streams[0]?(console.log("event streams detected"),p.srcObject=e.streams[0]):(n||(console.log("Creating new MediaStream"),n=new MediaStream),console.log("adding track to remote stream"),n.addTrack(e.track),p.setAttribute("src",n),p.srcObject=n),p.autoplay=!0}function L(e){console.log("createOffer() error: ",e)}function E(e){l.setLocalDescription(e),console.log("setLocalAndSendMessage sending message",e),m(e)}function T(e){console.log("Failed to create session description: "+e.toString())}function S(){u=!1,o.close(),l.close(),l=null,p.pause(),p.removeAttribute("src"),p.removeAttribute("autoplay"),n=null,p.load()}function M(e){console.log("Received Channel Callback"),(o=e.channel).onmessage=x,o.onerror=function(e){console.log("Data Channel Error:",e)},o.onopen=C,o.onclose=C,console.log("CREATED DATACHANNEL gameUpdates")}function x(e){(0,i.updateRemoteObjects)(e.data)}function R(e){console.log("Data Channel Error:",e)}function C(e){o&&("open"===o.readyState?console.log("DATA CHANNEL STATE: open"):console.log("DATA CHANNEL STATE: closed"))}}},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)},"?c568":()=>{},"?a610":()=>{}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,