/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[]).push([["main"],{"./src/js/app.js":(e,t,n)=>{"use strict";n.r(t);var a=n("./src/js/data/config.js"),r=n("./src/js/utils/detector.js"),o=n("./src/js/app/main.js"),i=n("./src/js/webrtc/peerController.js");n("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(new i.default,r.default.webgl){var e=document.getElementById("appContainer");new o.default(e)}else r.default.addGetWebGLMessage()}()},"./src/js/app/components/camera.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.domElement.width,i=t.domElement.height;this.threeCamera=new a.PerspectiveCamera(r.default.camera.fov,o/i,r.default.camera.near,r.default.camera.far),this.threeCamera.position.set(r.default.camera.posX,r.default.camera.posY,r.default.camera.posZ),this.updateSize(t),window.addEventListener("resize",(function(){return n.updateSize(t)}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}}])&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/app/components/controls.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/utils/orbitControls.js"),o=n.n(r),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=new(o())(a);this.threeControls=new r(t,n),this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){this.threeControls.target.set(i.default.controls.target.x,i.default.controls.target.y,i.default.controls.target.z),this.threeControls.autoRotate=i.default.controls.autoRotate,this.threeControls.autoRotateSpeed=i.default.controls.autoRotateSpeed,this.threeControls.rotateSpeed=i.default.controls.rotateSpeed,this.threeControls.zoomSpeed=i.default.controls.zoomSpeed,this.threeControls.minDistance=i.default.controls.minDistance,this.threeControls.maxDistance=i.default.controls.maxDistance,this.threeControls.minPolarAngle=i.default.controls.minPolarAngle,this.threeControls.maxPolarAngle=i.default.controls.maxPolarAngle,this.threeControls.enableDamping=i.default.controls.enableDamping,this.threeControls.enableZoom=i.default.controls.enableZoom,this.threeControls.dampingFactor=i.default.controls.dampingFactor}}])&&s(t.prototype,n),r&&s(t,r),e}()},"./src/js/app/components/geometry.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>c});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/components/material.js"),o=n("./src/js/data/config.js");function i(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function l(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var c=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.geo=null}var t,n,s;return t=e,(n=[{key:"make",value:function(e){var t=this;return"plane"===e?function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;t.geo=new a.PlaneGeometry(e,n,r,o)}:"sphere"===e?function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:32,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:32;t.geo=new a.SphereGeometry(e,n,r)}:void 0}},{key:"place",value:function(e,t){var n,s,l=new r.default(15658734).standard,c=new a.Mesh(this.geo,l);(n=c.position).set.apply(n,i(e)),(s=c.rotation).set.apply(s,i(t)),o.default.shadow.enabled&&(c.receiveShadow=!0),this.scene.add(c)}}])&&l(t.prototype,n),s&&l(t,s),e}()},"./src/js/app/components/light.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.init()}var t,n,i;return t=e,(n=[{key:"init",value:function(){this.ambientLight=new a.AmbientLight(r.default.ambientLight.color),this.ambientLight.visible=r.default.ambientLight.enabled,this.pointLight=new a.PointLight(r.default.pointLight.color,r.default.pointLight.intensity,r.default.pointLight.distance),this.pointLight.position.set(r.default.pointLight.x,r.default.pointLight.y,r.default.pointLight.z),this.pointLight.visible=r.default.pointLight.enabled,this.directionalLight=new a.DirectionalLight(r.default.directionalLight.color,r.default.directionalLight.intensity),this.directionalLight.position.set(r.default.directionalLight.x,r.default.directionalLight.y,r.default.directionalLight.z),this.directionalLight.visible=r.default.directionalLight.enabled,this.directionalLight.castShadow=r.default.shadow.enabled,this.directionalLight.shadow.bias=r.default.shadow.bias,this.directionalLight.shadow.camera.near=r.default.shadow.near,this.directionalLight.shadow.camera.far=r.default.shadow.far,this.directionalLight.shadow.camera.left=r.default.shadow.left,this.directionalLight.shadow.camera.right=r.default.shadow.right,this.directionalLight.shadow.camera.top=r.default.shadow.top,this.directionalLight.shadow.camera.bottom=r.default.shadow.bottom,this.directionalLight.shadow.mapSize.width=r.default.shadow.mapWidth,this.directionalLight.shadow.mapSize.height=r.default.shadow.mapHeight,r.default.isDev&&(this.directionalLightHelper=new a.CameraHelper(this.directionalLight.shadow.camera),this.directionalLightHelper.visible=r.default.shadow.helperEnabled),this.hemiLight=new a.HemisphereLight(r.default.hemiLight.color,r.default.hemiLight.groundColor,r.default.hemiLight.intensity),this.hemiLight.position.set(r.default.hemiLight.x,r.default.hemiLight.y,r.default.hemiLight.z),this.hemiLight.visible=r.default.hemiLight.enabled}},{key:"place",value:function(e){switch(e){case"ambient":this.scene.add(this.ambientLight);break;case"directional":this.scene.add(this.directionalLight),r.default.isDev&&this.scene.add(this.directionalLightHelper);break;case"point":this.scene.add(this.pointLight);break;case"hemi":this.scene.add(this.hemiLight)}}}])&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/app/components/material.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");var r=function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.basic=new a.MeshBasicMaterial({color:t,side:a.DoubleSide}),this.standard=new a.MeshStandardMaterial({color:t,shading:a.FlatShading,roughness:1,metalness:0,side:a.DoubleSide}),this.wire=new a.MeshBasicMaterial({wireframe:!0})}},"./src/js/app/components/renderer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/data/config.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t,n){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=n,this.threeRenderer=new a.WebGLRenderer({antialias:!0,alpha:!0}),this.threeRenderer.setClearColor(t.fog.color),this.threeRenderer.setPixelRatio(window.devicePixelRatio),n.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=a.PCFSoftShadowMap,r.default.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return o.updateSize()}),!1),window.addEventListener("resize",(function(){return o.updateSize()}),!1)}var t,n,i;return t=e,(n=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}}])&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/app/helpers/meshHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/helpers/vertexNormalsHelper.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.mesh=n,this.scene=t;var o=new a.WireframeGeometry(this.mesh.geometry);this.wireLine=new a.LineSegments(o),this.wireLine.material.depthTest=!1,this.wireLine.material.opacity=.25,this.wireLine.material.transparent=!0;var i=new a.EdgesGeometry(this.mesh.geometry);this.edgesLine=new a.LineSegments(i),this.edgesLine.material.depthTest=!1,this.edgesLine.material.opacity=.25,this.edgesLine.material.transparent=!0,this.vertexHelper=new r.VertexNormalsHelper(this.mesh,2),this.boxHelper=new a.BoxHelper(this.mesh)}var t,n,i;return t=e,(n=[{key:"enable",value:function(){this.mesh.add(this.wireLine),this.mesh.add(this.edgesLine),this.scene.add(this.vertexHelper),this.scene.add(this.boxHelper)}},{key:"disable",value:function(){this.mesh.remove(this.wireLine),this.mesh.remove(this.edgesLine),this.scene.remove(this.vertexHelper),this.scene.remove(this.boxHelper)}}])&&o(t.prototype,n),i&&o(t,i),e}()},"./src/js/app/helpers/stats.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r,o,i,s;n.r(t),n.d(t,{default:()=>l});var l=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t}var t,n,l;return t=e,l=[{key:"start",value:function(){r("frame").start(),i.start(),r("rAF").tick(),r("FPS").frame(),r("render").start()}},{key:"end",value:function(){r("render").end(),r("frame").end(),r("rStats").start(),r().update(),r("rStats").end()}}],(n=[{key:"setUp",value:function(){o=new BrowserStats,i=new glStats,s=new threeStats(this.renderer.threeRenderer),r=new rStats({CSSPath:"./css/",userTimingAPI:!0,values:{frame:{caption:"Total frame time (ms)",over:16,average:!0,avgMs:100},fps:{caption:"Framerate (FPS)",below:30},calls:{caption:"Calls (three.js)",over:3e3},raf:{caption:"Time since last rAF (ms)",average:!0,avgMs:100},rstats:{caption:"rStats update (ms)",average:!0,avgMs:100},texture:{caption:"GenTex",average:!0,avgMs:100}},groups:[{caption:"Framerate",values:["fps","raf"]},{caption:"Frame Budget",values:["frame","texture","setup","render"]}],fractions:[{base:"frame",steps:["texture","setup","render"]}],plugins:[o,s]})}}])&&a(t.prototype,n),l&&a(t,l),e}()},"./src/js/app/helpers/vertexNormalsHelper.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{VertexNormalsHelper:()=>l});var a=n("./node_modules/three/build/three.module.js"),r=new a.Vector3,o=new a.Vector3,i=new a.Matrix3,s=["a","b","c"];function l(e,t,n){this.object=e,this.size=void 0!==t?t:.1;var r=void 0!==n?n:16711680,o=0,i=this.object.geometry;i&&i.isGeometry?o=3*i.faces.length:i&&i.isBufferGeometry&&(o=i.attributes.normal.count);var s=new a.BufferGeometry,l=new a.Float32BufferAttribute(2*o*3,3);s.setAttribute("position",l),a.LineSegments.call(this,s,new a.LineBasicMaterial({color:r,toneMapped:!1})),this.type="VertexNormalsHelper",this.matrixAutoUpdate=!1,this.update()}l.prototype=Object.create(a.LineSegments.prototype),l.prototype.constructor=l,l.prototype.update=function(){var e;this.object.updateMatrixWorld(!0),i.getNormalMatrix(this.object.matrixWorld);var t=this.object.matrixWorld,n=this.geometry.attributes.position,a=this.object.geometry;if(a&&a.isGeometry){var l=a.vertices,c=a.faces;e=0;for(var u=0,d=c.length;u<d;u++)for(var h=c[u],f=0,m=h.vertexNormals.length;f<m;f++){var p=l[h[s[f]]],g=h.vertexNormals[f];r.copy(p).applyMatrix4(t),o.copy(g).applyMatrix3(i).normalize().multiplyScalar(this.size).add(r),n.setXYZ(e,r.x,r.y,r.z),e+=1,n.setXYZ(e,o.x,o.y,o.z),e+=1}}else if(a&&a.isBufferGeometry){var v=a.attributes.position,b=a.attributes.normal;e=0;for(var y=0,w=v.count;y<w;y++)r.set(v.getX(y),v.getY(y),v.getZ(y)).applyMatrix4(t),o.set(b.getX(y),b.getY(y),b.getZ(y)),o.applyMatrix3(i).normalize().multiplyScalar(this.size).add(r),n.setXYZ(e,r.x,r.y,r.z),e+=1,n.setXYZ(e,o.x,o.y,o.z),e+=1}n.needsUpdate=!0}},"./src/js/app/loaders/GLTFLoader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{GLTFLoader:()=>o});var a=n("./node_modules/three/build/three.module.js");function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=function(){function e(e){a.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:e,load:function(e,t,n,r){var o,i=this;o=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:a.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var s=function(t){r?r(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new a.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(n){try{i.parse(n,o,(function(n){t(n),i.manager.itemEnd(e)}),s)}catch(e){s(e)}}),n,s)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,r,u){var d,p={};if("string"==typeof e)d=e;else if(a.LoaderUtils.decodeText(new Uint8Array(e,0,4))===c){try{p[n.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(u&&u(e))}d=p[n.KHR_BINARY_GLTF].content}else d=a.LoaderUtils.decodeText(new Uint8Array(e));var b=JSON.parse(d);if(void 0===b.asset||b.asset.version[0]<2)u&&u(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(b.extensionsUsed)for(var y=0;y<b.extensionsUsed.length;++y){var w=b.extensionsUsed[y],L=b.extensionsRequired||[];switch(w){case n.KHR_LIGHTS_PUNCTUAL:p[w]=new i(b);break;case n.KHR_MATERIALS_CLEARCOAT:p[w]=new l;break;case n.KHR_MATERIALS_UNLIT:p[w]=new s;break;case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:p[w]=new g;break;case n.KHR_DRACO_MESH_COMPRESSION:p[w]=new f(b,this.dracoLoader);break;case n.MSFT_TEXTURE_DDS:p[w]=new o(this.ddsLoader);break;case n.KHR_TEXTURE_TRANSFORM:p[w]=new m;break;case n.KHR_MESH_QUANTIZATION:p[w]=new v;break;default:L.indexOf(w)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}new B(b,p,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(r,u)}}});var n={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function o(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=n.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=n.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[n.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function s(){this.name=n.KHR_MATERIALS_UNLIT}function l(){this.name=n.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,n=this.lightDefs[e],r=new a.Color(16777215);void 0!==n.color&&r.fromArray(n.color);var o=void 0!==n.range?n.range:0;switch(n.type){case"directional":(t=new a.DirectionalLight(r)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new a.PointLight(r)).distance=o;break;case"spot":(t=new a.SpotLight(r)).distance=o,n.spot=n.spot||{},n.spot.innerConeAngle=void 0!==n.spot.innerConeAngle?n.spot.innerConeAngle:0,n.spot.outerConeAngle=void 0!==n.spot.outerConeAngle?n.spot.outerConeAngle:Math.PI/4,t.angle=n.spot.outerConeAngle,t.penumbra=1-n.spot.innerConeAngle/n.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+n.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==n.intensity&&(t.intensity=n.intensity),t.name=n.name||"light_"+e,Promise.resolve(t)},s.prototype.getMaterialType=function(){return a.MeshBasicMaterial},s.prototype.extendParams=function(e,t,n){var r=[];e.color=new a.Color(1,1,1),e.opacity=1;var o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){var i=o.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==o.baseColorTexture&&r.push(n.assignTexture(e,"map",o.baseColorTexture))}return Promise.all(r)},l.prototype.getMaterialType=function(){return a.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,n){var r=[],o=t.extensions[this.name];if(void 0!==o.clearcoatFactor&&(e.clearcoat=o.clearcoatFactor),void 0!==o.clearcoatTexture&&r.push(n.assignTexture(e,"clearcoatMap",o.clearcoatTexture)),void 0!==o.clearcoatRoughnessFactor&&(e.clearcoatRoughness=o.clearcoatRoughnessFactor),void 0!==o.clearcoatRoughnessTexture&&r.push(n.assignTexture(e,"clearcoatRoughnessMap",o.clearcoatRoughnessTexture)),void 0!==o.clearcoatNormalTexture&&(r.push(n.assignTexture(e,"clearcoatNormalMap",o.clearcoatNormalTexture)),void 0!==o.clearcoatNormalTexture.scale)){var i=o.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new a.Vector2(i,i)}return Promise.all(r)};var c="glTF",u=1313821514,d=5130562;function h(e){this.name=n.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:a.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==c)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var r=new DataView(e,12),o=0;o<r.byteLength;){var i=r.getUint32(o,!0);o+=4;var s=r.getUint32(o,!0);if(o+=4,s===u){var l=new Uint8Array(e,12+o,i);this.content=a.LoaderUtils.decodeText(l)}else if(s===d){var h=12+o;this.body=e.slice(h,h+i)}o+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function f(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=n.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=n.KHR_TEXTURE_TRANSFORM}function p(e){a.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),n=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),r=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),o=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),s={specular:{value:(new a.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=s,this.onBeforeCompile=function(e){for(var a in s)e.uniforms[a]=s[a];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",o),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return s.specular.value},set:function(e){s.specular.value=e}},specularMap:{get:function(){return s.specularMap.value},set:function(e){s.specularMap.value=e}},glossiness:{get:function(){return s.glossiness.value},set:function(e){s.glossiness.value=e}},glossinessMap:{get:function(){return s.glossinessMap.value},set:function(e){s.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return p},extendParams:function(e,t,n){var r=t.extensions[this.name];e.color=new a.Color(1,1,1),e.opacity=1;var o=[];if(Array.isArray(r.diffuseFactor)){var i=r.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==r.diffuseTexture&&o.push(n.assignTexture(e,"map",r.diffuseTexture)),e.emissive=new a.Color(0,0,0),e.glossiness=void 0!==r.glossinessFactor?r.glossinessFactor:1,e.specular=new a.Color(1,1,1),Array.isArray(r.specularFactor)&&e.specular.fromArray(r.specularFactor),void 0!==r.specularGlossinessTexture){var s=r.specularGlossinessTexture;o.push(n.assignTexture(e,"glossinessMap",s)),o.push(n.assignTexture(e,"specularMap",s))}return Promise.all(o)},createMaterial:function(e){var t=new p(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=a.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=n.KHR_MESH_QUANTIZATION}function b(e,t,n,r){a.Interpolant.call(this,e,t,n,r)}f.prototype.decodePrimitive=function(e,t){var n=this.json,a=this.dracoLoader,r=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,i={},s={},l={};for(var c in o){var u=j[c]||c.toLowerCase();i[u]=o[c]}for(c in e.attributes){u=j[c]||c.toLowerCase();if(void 0!==o[c]){var d=n.accessors[e.attributes[c]],h=M[d.componentType];l[u]=h,s[u]=!0===d.normalized}}return t.getDependency("bufferView",r).then((function(e){return new Promise((function(t){a.decodeDracoFile(e,(function(e){for(var n in e.attributes){var a=e.attributes[n],r=s[n];void 0!==r&&(a.normalized=r)}t(e)}),i,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},p.prototype=Object.create(a.MeshStandardMaterial.prototype),p.prototype.constructor=p,p.prototype.copy=function(e){return a.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},b.prototype=Object.create(a.Interpolant.prototype),b.prototype.constructor=b,b.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,a=this.valueSize,r=e*a*3+a,o=0;o!==a;o++)t[o]=n[r+o];return t},b.prototype.beforeStart_=b.prototype.copySampleValue_,b.prototype.afterEnd_=b.prototype.copySampleValue_,b.prototype.interpolate_=function(e,t,n,a){for(var r=this.resultBuffer,o=this.sampleValues,i=this.valueSize,s=2*i,l=3*i,c=a-t,u=(n-t)/c,d=u*u,h=d*u,f=e*l,m=f-l,p=-2*h+3*d,g=h-d,v=1-p,b=g-d+u,y=0;y!==i;y++){var w=o[m+y+i],L=o[m+y+s]*c,S=o[f+y+i],E=o[f+y]*c;r[y]=v*w+b*L+p*S+g*E}return r};var y=0,w=1,L=2,S=3,E=4,T=5,C=6,M={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:a.NearestFilter,9729:a.LinearFilter,9984:a.NearestMipmapNearestFilter,9985:a.LinearMipmapNearestFilter,9986:a.NearestMipmapLinearFilter,9987:a.LinearMipmapLinearFilter},x={33071:a.ClampToEdgeWrapping,33648:a.MirroredRepeatWrapping,10497:a.RepeatWrapping},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},j={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},P={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},k={CUBICSPLINE:void 0,LINEAR:a.InterpolateLinear,STEP:a.InterpolateDiscrete},_="OPAQUE",O="MASK",D="BLEND",I={"image/png":a.RGBAFormat,"image/jpeg":a.RGBFormat};function H(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function F(e,t,n){for(var a in n.extensions)void 0===e[a]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[a]=n.extensions[a])}function U(e,t){void 0!==t.extras&&("object"===r(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,a=t.weights.length;n<a;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var r=t.extras.targetNames;if(e.morphTargetInfluences.length===r.length){e.morphTargetDictionary={};for(n=0,a=r.length;n<a;n++)e.morphTargetDictionary[r[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function N(e){for(var t="",n=Object.keys(e).sort(),a=0,r=n.length;a<r;a++)t+=n[a]+":"+e[n[a]]+";";return t}function B(e,n,r){this.json=e||{},this.extensions=n||{},this.options=r||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new a.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new a.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,n){var r=t.attributes,o=[];function i(t,a){return n.getDependency("accessor",t).then((function(t){e.setAttribute(a,t)}))}for(var s in r){var l=j[s]||s.toLowerCase();l in e.attributes||o.push(i(r[s],l))}if(void 0!==t.indices&&!e.index){var c=n.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));o.push(c)}return U(e,t),function(e,t,n){var r=t.attributes,o=new a.Box3;if(void 0!==r.POSITION){var i=(f=n.json.accessors[r.POSITION]).min,s=f.max;if(void 0!==i&&void 0!==s){o.set(new a.Vector3(i[0],i[1],i[2]),new a.Vector3(s[0],s[1],s[2]));var l=t.targets;if(void 0!==l){for(var c=new a.Vector3,u=new a.Vector3,d=0,h=l.length;d<h;d++){var f,m=l[d];if(void 0!==m.POSITION)i=(f=n.json.accessors[m.POSITION]).min,s=f.max,void 0!==i&&void 0!==s?(u.setX(Math.max(Math.abs(i[0]),Math.abs(s[0]))),u.setY(Math.max(Math.abs(i[1]),Math.abs(s[1]))),u.setZ(Math.max(Math.abs(i[2]),Math.abs(s[2]))),c.max(u)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}o.expandByVector(c)}e.boundingBox=o;var p=new a.Sphere;o.getCenter(p.center),p.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=p}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,n),Promise.all(o).then((function(){return void 0!==t.targets?function(e,t,n){for(var a=!1,r=!1,o=0,i=t.length;o<i&&(void 0!==(c=t[o]).POSITION&&(a=!0),void 0!==c.NORMAL&&(r=!0),!a||!r);o++);if(!a&&!r)return Promise.resolve(e);var s=[],l=[];for(o=0,i=t.length;o<i;o++){var c=t[o];if(a){var u=void 0!==c.POSITION?n.getDependency("accessor",c.POSITION):e.attributes.position;s.push(u)}r&&(u=void 0!==c.NORMAL?n.getDependency("accessor",c.NORMAL):e.attributes.normal,l.push(u))}return Promise.all([Promise.all(s),Promise.all(l)]).then((function(t){var n=t[0],o=t[1];return a&&(e.morphAttributes.position=n),r&&(e.morphAttributes.normal=o),e.morphTargetsRelative=!0,e}))}(e,t.targets,n):e}))}function V(e,t){var n=e.getIndex();if(null===n){var r=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)r.push(i);e.setIndex(r),n=e.getIndex()}var s=n.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c}return B.prototype.parse=function(e,t){var n=this,a=this.json,r=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var o={scene:t[0][a.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:a.asset,parser:n,userData:{}};F(r,o,a),U(o,a),e(o)})).catch(t)},B.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],a={},r={},o=0,i=t.length;o<i;o++)for(var s=t[o].joints,l=0,c=s.length;l<c;l++)e[s[l]].isBone=!0;for(var u=0,d=e.length;u<d;u++){var h=e[u];void 0!==h.mesh&&(void 0===a[h.mesh]&&(a[h.mesh]=r[h.mesh]=0),a[h.mesh]++,void 0!==h.skin&&(n[h.mesh].isSkinnedMesh=!0))}this.json.meshReferences=a,this.json.meshUses=r},B.prototype.getDependency=function(e,t){var a=e+":"+t,r=this.cache.get(a);if(!r){switch(e){case"scene":r=this.loadScene(t);break;case"node":r=this.loadNode(t);break;case"mesh":r=this.loadMesh(t);break;case"accessor":r=this.loadAccessor(t);break;case"bufferView":r=this.loadBufferView(t);break;case"buffer":r=this.loadBuffer(t);break;case"material":r=this.loadMaterial(t);break;case"texture":r=this.loadTexture(t);break;case"skin":r=this.loadSkin(t);break;case"animation":r=this.loadAnimation(t);break;case"camera":r=this.loadCamera(t);break;case"light":r=this.extensions[n.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(a,r)}return r},B.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,a=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(a.map((function(t,a){return n.getDependency(e,a)}))),this.cache.add(e,t)}return t},B.prototype.loadBuffer=function(e){var t=this.json.buffers[e],a=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);var r=this.options;return new Promise((function(e,n){a.load(H(t.uri,r.path),e,void 0,(function(){n(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},B.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var n=t.byteLength||0,a=t.byteOffset||0;return e.slice(a,a+n)}))},B.prototype.loadAccessor=function(e){var t=this,n=this.json,r=this.json.accessors[e];if(void 0===r.bufferView&&void 0===r.sparse)return Promise.resolve(null);var o=[];return void 0!==r.bufferView?o.push(this.getDependency("bufferView",r.bufferView)):o.push(null),void 0!==r.sparse&&(o.push(this.getDependency("bufferView",r.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",r.sparse.values.bufferView))),Promise.all(o).then((function(e){var o,i,s=e[0],l=A[r.type],c=M[r.componentType],u=c.BYTES_PER_ELEMENT,d=u*l,h=r.byteOffset||0,f=void 0!==r.bufferView?n.bufferViews[r.bufferView].byteStride:void 0,m=!0===r.normalized;if(f&&f!==d){var p=Math.floor(h/f),g="InterleavedBuffer:"+r.bufferView+":"+r.componentType+":"+p+":"+r.count,v=t.cache.get(g);v||(o=new c(s,p*f,r.count*f/u),v=new a.InterleavedBuffer(o,f/u),t.cache.add(g,v)),i=new a.InterleavedBufferAttribute(v,l,h%f/u,m)}else o=null===s?new c(r.count*l):new c(s,h,r.count*l),i=new a.BufferAttribute(o,l,m);if(void 0!==r.sparse){var b=A.SCALAR,y=M[r.sparse.indices.componentType],w=r.sparse.indices.byteOffset||0,L=r.sparse.values.byteOffset||0,S=new y(e[1],w,r.sparse.count*b),E=new c(e[2],L,r.sparse.count*l);null!==s&&(i=new a.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var T=0,C=S.length;T<C;T++){var R=S[T];if(i.setX(R,E[T*l]),l>=2&&i.setY(R,E[T*l+1]),l>=3&&i.setZ(R,E[T*l+2]),l>=4&&i.setW(R,E[T*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},B.prototype.loadTexture=function(e){var t,r=this,o=this.json,i=this.options,s=this.textureLoader,l=self.URL||self.webkitURL,c=o.textures[e],u=c.extensions||{},d=(t=u[n.MSFT_TEXTURE_DDS]?o.images[u[n.MSFT_TEXTURE_DDS].source]:o.images[c.source]).uri,h=!1;return void 0!==t.bufferView&&(d=r.getDependency("bufferView",t.bufferView).then((function(e){h=!0;var n=new Blob([e],{type:t.mimeType});return d=l.createObjectURL(n)}))),Promise.resolve(d).then((function(e){var t=i.manager.getHandler(e);return t||(t=u[n.MSFT_TEXTURE_DDS]?r.extensions[n.MSFT_TEXTURE_DDS].ddsLoader:s),new Promise((function(n,a){t.load(H(e,i.path),n,void 0,a)}))})).then((function(e){!0===h&&l.revokeObjectURL(d),e.flipY=!1,c.name&&(e.name=c.name),t.mimeType in I&&(e.format=I[t.mimeType]);var n=(o.samplers||{})[c.sampler]||{};return e.magFilter=R[n.magFilter]||a.LinearFilter,e.minFilter=R[n.minFilter]||a.LinearMipmapLinearFilter,e.wrapS=x[n.wrapS]||a.RepeatWrapping,e.wrapT=x[n.wrapT]||a.RepeatWrapping,e}))},B.prototype.assignTexture=function(e,t,r){var o=this;return this.getDependency("texture",r.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=a.RGBFormat}if(void 0===r.texCoord||0==r.texCoord||"aoMap"===t&&1==r.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+r.texCoord+" for texture "+t+" not yet supported."),o.extensions[n.KHR_TEXTURE_TRANSFORM]){var s=void 0!==r.extensions?r.extensions[n.KHR_TEXTURE_TRANSFORM]:void 0;s&&(i=o.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(i,s))}e[t]=i}))},B.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,r=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,i=void 0===t.attributes.normal,s=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,c=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+n.uuid,d=this.cache.get(u);d||(d=new a.PointsMaterial,a.Material.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(u,d)),n=d}else if(e.isLine){u="LineBasicMaterial:"+n.uuid;var h=this.cache.get(u);h||(h=new a.LineBasicMaterial,a.Material.prototype.copy.call(h,n),h.color.copy(n.color),this.cache.add(u,h)),n=h}if(r||o||i||s||l){u="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),s&&(u+="skinning:"),r&&(u+="vertex-tangents:"),o&&(u+="vertex-colors:"),i&&(u+="flat-shading:"),l&&(u+="morph-targets:"),c&&(u+="morph-normals:");var f=this.cache.get(u);f||(f=n.clone(),s&&(f.skinning=!0),r&&(f.vertexTangents=!0),o&&(f.vertexColors=!0),i&&(f.flatShading=!0),l&&(f.morphTargets=!0),c&&(f.morphNormals=!0),this.cache.add(u,f)),n=f}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),n.normalScale&&!r&&(n.normalScale.y=-n.normalScale.y),n.clearcoatNormalScale&&!r&&(n.clearcoatNormalScale.y=-n.clearcoatNormalScale.y),e.material=n},B.prototype.loadMaterial=function(e){var t,r=this,o=this.json,i=this.extensions,s=o.materials[e],l={},c=s.extensions||{},u=[];if(c[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),u.push(d.extendParams(l,s,r))}else if(c[n.KHR_MATERIALS_UNLIT]){var h=i[n.KHR_MATERIALS_UNLIT];t=h.getMaterialType(),u.push(h.extendParams(l,s,r))}else{t=a.MeshStandardMaterial;var f=s.pbrMetallicRoughness||{};if(l.color=new a.Color(1,1,1),l.opacity=1,Array.isArray(f.baseColorFactor)){var m=f.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==f.baseColorTexture&&u.push(r.assignTexture(l,"map",f.baseColorTexture)),l.metalness=void 0!==f.metallicFactor?f.metallicFactor:1,l.roughness=void 0!==f.roughnessFactor?f.roughnessFactor:1,void 0!==f.metallicRoughnessTexture&&(u.push(r.assignTexture(l,"metalnessMap",f.metallicRoughnessTexture)),u.push(r.assignTexture(l,"roughnessMap",f.metallicRoughnessTexture)))}!0===s.doubleSided&&(l.side=a.DoubleSide);var g=s.alphaMode||_;if(g===D?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===O&&(l.alphaTest=void 0!==s.alphaCutoff?s.alphaCutoff:.5)),void 0!==s.normalTexture&&t!==a.MeshBasicMaterial&&(u.push(r.assignTexture(l,"normalMap",s.normalTexture)),l.normalScale=new a.Vector2(1,1),void 0!==s.normalTexture.scale&&l.normalScale.set(s.normalTexture.scale,s.normalTexture.scale)),void 0!==s.occlusionTexture&&t!==a.MeshBasicMaterial&&(u.push(r.assignTexture(l,"aoMap",s.occlusionTexture)),void 0!==s.occlusionTexture.strength&&(l.aoMapIntensity=s.occlusionTexture.strength)),void 0!==s.emissiveFactor&&t!==a.MeshBasicMaterial&&(l.emissive=(new a.Color).fromArray(s.emissiveFactor)),void 0!==s.emissiveTexture&&t!==a.MeshBasicMaterial&&u.push(r.assignTexture(l,"emissiveMap",s.emissiveTexture)),c[n.KHR_MATERIALS_CLEARCOAT]){var v=i[n.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),u.push(v.extendParams(l,{extensions:c},r))}return Promise.all(u).then((function(){var e;return e=t===p?i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),s.name&&(e.name=s.name),e.map&&(e.map.encoding=a.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=a.sRGBEncoding),U(e,s),s.extensions&&F(i,e,s),e}))},B.prototype.loadGeometries=function(e){var t=this,r=this.extensions,o=this.primitiveCache;function i(e){return r[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(n){return z(n,e,t)}))}for(var s,l,c=[],u=0,d=e.length;u<d;u++){var h,f=e[u],m=(l=void 0,(l=(s=f).extensions&&s.extensions[n.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+N(l.attributes):s.indices+":"+N(s.attributes)+":"+s.mode),p=o[m];if(p)c.push(p.promise);else h=f.extensions&&f.extensions[n.KHR_DRACO_MESH_COMPRESSION]?i(f):z(new a.BufferGeometry,f,t),o[m]={primitive:f,promise:h},c.push(h)}return Promise.all(c)},B.prototype.loadMesh=function(e){for(var t,n=this,r=this.json.meshes[e],o=r.primitives,i=[],s=0,l=o.length;s<l;s++){var c=void 0===o[s].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new a.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:a.FrontSide})),t.DefaultMaterial):this.getDependency("material",o[s].material);i.push(c)}return i.push(n.loadGeometries(o)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),s=t[t.length-1],l=[],c=0,u=s.length;c<u;c++){var d,h=s[c],f=o[c],m=i[c];if(f.mode===E||f.mode===T||f.mode===C||void 0===f.mode)!0!==(d=!0===r.isSkinnedMesh?new a.SkinnedMesh(h,m):new a.Mesh(h,m)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),f.mode===T?d.geometry=V(d.geometry,a.TriangleStripDrawMode):f.mode===C&&(d.geometry=V(d.geometry,a.TriangleFanDrawMode));else if(f.mode===w)d=new a.LineSegments(h,m);else if(f.mode===S)d=new a.Line(h,m);else if(f.mode===L)d=new a.LineLoop(h,m);else{if(f.mode!==y)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+f.mode);d=new a.Points(h,m)}Object.keys(d.geometry.morphAttributes).length>0&&G(d,r),d.name=r.name||"mesh_"+e,s.length>1&&(d.name+="_"+c),U(d,r),n.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var p=new a.Group;for(c=0,u=l.length;c<u;c++)p.add(l[c]);return p}))},B.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],r=n[n.type];if(r)return"perspective"===n.type?t=new a.PerspectiveCamera(a.MathUtils.radToDeg(r.yfov),r.aspectRatio||1,r.znear||1,r.zfar||2e6):"orthographic"===n.type&&(t=new a.OrthographicCamera(-r.xmag,r.xmag,r.ymag,-r.ymag,r.znear,r.zfar)),n.name&&(t.name=n.name),U(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},B.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return n.inverseBindMatrices=e,n}))},B.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],r=[],o=[],i=[],s=[],l=0,c=t.channels.length;l<c;l++){var u=t.channels[l],d=t.samplers[u.sampler],h=u.target,f=void 0!==h.node?h.node:h.id,m=void 0!==t.parameters?t.parameters[d.input]:d.input,p=void 0!==t.parameters?t.parameters[d.output]:d.output;n.push(this.getDependency("node",f)),r.push(this.getDependency("accessor",m)),o.push(this.getDependency("accessor",p)),i.push(d),s.push(h)}return Promise.all([Promise.all(n),Promise.all(r),Promise.all(o),Promise.all(i),Promise.all(s)]).then((function(n){for(var r=n[0],o=n[1],i=n[2],s=n[3],l=n[4],c=[],u=0,d=r.length;u<d;u++){var h=r[u],f=o[u],m=i[u],p=s[u],g=l[u];if(void 0!==h){var v;switch(h.updateMatrix(),h.matrixAutoUpdate=!0,P[g.path]){case P.weights:v=a.NumberKeyframeTrack;break;case P.rotation:v=a.QuaternionKeyframeTrack;break;case P.position:case P.scale:default:v=a.VectorKeyframeTrack}var y=h.name?h.name:h.uuid,w=void 0!==p.interpolation?k[p.interpolation]:a.InterpolateLinear,L=[];P[g.path]===P.weights?h.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&L.push(e.name?e.name:e.uuid)})):L.push(y);var S=m.array;if(m.normalized){var E;if(S.constructor===Int8Array)E=1/127;else if(S.constructor===Uint8Array)E=1/255;else if(S.constructor==Int16Array)E=1/32767;else{if(S.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");E=1/65535}for(var T=new Float32Array(S.length),C=0,M=S.length;C<M;C++)T[C]=S[C]*E;S=T}for(C=0,M=L.length;C<M;C++){var R=new v(L[C]+"."+P[g.path],f.array,S,w);"CUBICSPLINE"===p.interpolation&&(R.createInterpolant=function(e){return new b(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(R)}}}var x=t.name?t.name:"animation_"+e;return new a.AnimationClip(x,void 0,c)}))},B.prototype.loadNode=function(e){var t,r=this.json,o=this.extensions,i=this,s=r.meshReferences,l=r.meshUses,c=r.nodes[e];return(t=[],void 0!==c.mesh&&t.push(i.getDependency("mesh",c.mesh).then((function(e){var t;if(s[c.mesh]>1){var n=l[c.mesh]++;(t=e.clone()).name+="_instance_"+n}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,n=c.weights.length;t<n;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(i.getDependency("camera",c.camera)),c.extensions&&c.extensions[n.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[n.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",c.extensions[n.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new a.Bone:e.length>1?new a.Group:1===e.length?e[0]:new a.Object3D)!==e[0])for(var n=0,r=e.length;n<r;n++)t.add(e[n]);if(c.name&&(t.userData.name=c.name,t.name=a.PropertyBinding.sanitizeNodeName(c.name)),U(t,c),c.extensions&&F(o,t,c),void 0!==c.matrix){var i=new a.Matrix4;i.fromArray(c.matrix),t.applyMatrix4(i)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},B.prototype.loadScene=function(){function e(t,n,r,o){var i=r.nodes[t];return o.getDependency("node",t).then((function(e){return void 0===i.skin?e:o.getDependency("skin",i.skin).then((function(e){for(var n=[],a=0,r=(t=e).joints.length;a<r;a++)n.push(o.getDependency("node",t.joints[a]));return Promise.all(n)})).then((function(n){return e.traverse((function(e){if(e.isMesh){for(var r=[],o=[],i=0,s=n.length;i<s;i++){var l=n[i];if(l){r.push(l);var c=new a.Matrix4;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*i),o.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new a.Skeleton(r,o),e.matrixWorld)}})),e}));var t})).then((function(t){n.add(t);var a=[];if(i.children)for(var s=i.children,l=0,c=s.length;l<c;l++){var u=s[l];a.push(e(u,t,r,o))}return Promise.all(a)}))}return function(t){var n=this.json,r=this.extensions,o=this.json.scenes[t],i=new a.Group;o.name&&(i.name=o.name),U(i,o),o.extensions&&F(r,i,o);for(var s=o.nodes||[],l=[],c=0,u=s.length;c<u;c++)l.push(e(s[c],i,n,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var a=n("./node_modules/three/build/three.module.js"),r=n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js"),o=n("./src/js/app/components/renderer.js"),i=n("./src/js/app/components/camera.js"),s=n("./src/js/app/components/light.js"),l=n("./src/js/app/components/controls.js"),c=n("./src/js/app/components/geometry.js"),u=n("./src/js/app/helpers/stats.js"),d=n("./src/js/app/helpers/meshHelper.js"),h=n("./src/js/app/model/texture.js"),f=n("./src/js/app/model/model.js"),m=n("./src/js/app/managers/interaction.js"),p=n("./src/js/app/managers/datGUI.js"),g=n("./src/js/data/config.js");function v(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var b=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.clock=new a.Clock,this.scene=new a.Scene,this.scene.fog=new a.FogExp2(g.default.fog.color,g.default.fog.near),window.devicePixelRatio&&(g.default.dpr=window.devicePixelRatio),this.renderer=new o.default(this.scene,t),this.camera=new i.default(this.renderer.threeRenderer),this.controls=new l.default(this.camera.threeCamera,t),this.light=new s.default(this.scene);["ambient","directional","point","hemi"].forEach((function(e){return n.light.place(e)})),this.geometry=new c.default(this.scene),this.geometry.make("plane")(150,150,10,10),this.geometry.place([0,-20,0],[Math.PI/2,0,0]),g.default.isDev&&g.default.isShowingStats&&(this.stats=new u.default(this.renderer),this.stats.setUp()),g.default.isDev&&(this.gui=new p.default(this)),this.texture=new h.default,this.texture.load().then((function(){n.manager=new a.LoadingManager,n.model=new f.default(n.scene,n.manager,n.texture.textures),n.model.load(g.default.models[g.default.model.selected].type),n.manager.onProgress=function(e,t,n){console.log("".concat(e,": ").concat(t," ").concat(n))},n.manager.onLoad=function(){new m.default(n.renderer.threeRenderer,n.scene,n.camera.threeCamera,n.controls.threeControls),g.default.isDev&&(n.meshHelper=new d.default(n.scene,n.model.obj),g.default.mesh.enableHelper&&n.meshHelper.enable(),n.gui.load(n,n.model.obj)),g.default.isLoaded=!0,n.container.querySelector("#loading").style.display="none"}})),this.render()}var t,n,b;return t=e,(n=[{key:"render",value:function(){g.default.isDev&&g.default.isShowingStats&&u.default.start(),this.renderer.render(this.scene,this.camera.threeCamera),g.default.isDev&&g.default.isShowingStats&&u.default.end(),r.default.update(),this.controls.threeControls.update(),requestAnimationFrame(this.render.bind(this))}}])&&v(t.prototype,n),b&&v(t,b),e}()},"./src/js/app/managers/datGUI.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var a=n("./src/js/data/config.js");function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.gui=new dat.GUI,this.camera=t.camera.threeCamera,this.controls=t.controls.threeControls,this.light=t.light,this.scene=t.scene,this.model=null,this.meshHelper=null}var t,n,o;return t=e,(n=[{key:"load",value:function(e,t){var n=this;this.model=e.model,this.meshHelper=e.meshHelper;var o=this.gui.addFolder("Camera"),i=o.add(a.default.camera,"fov",0,180).name("Camera FOV");i.onChange((function(e){n.controls.enableRotate=!1,n.camera.fov=e})),i.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0}));var s=o.add(a.default.camera,"aspect",0,4).name("Camera Aspect");s.onChange((function(e){n.controls.enableRotate=!1,n.camera.aspect=e})),s.onFinishChange((function(){n.camera.updateProjectionMatrix(),n.controls.enableRotate=!0})),o.addColor(a.default.fog,"color").name("Fog Color").onChange((function(e){n.scene.fog.color.setHex(e)}));var l=o.add(a.default.fog,"near",0,.01).name("Fog Near");l.onChange((function(e){n.controls.enableRotate=!1,n.scene.fog.density=e})),l.onFinishChange((function(){n.controls.enableRotate=!0}));var c=this.gui.addFolder("Controls");c.add(a.default.controls,"autoRotate").name("Auto Rotate").onChange((function(e){n.controls.autoRotate=e}));var u=c.add(a.default.controls,"autoRotateSpeed",-1,1).name("Rotation Speed");u.onChange((function(e){n.controls.enableRotate=!1,n.controls.autoRotateSpeed=e})),u.onFinishChange((function(){n.controls.enableRotate=!0})),this.gui.addFolder("Model").add(a.default.model,"type",r(a.default.model.initialTypes)).name("Select Model").onChange((function(e){e&&(a.default.mesh.enableHelper&&n.meshHelper.disable(),a.default.model.selected=a.default.model.initialTypes.indexOf(e),n.unload(),n.model.unload(),n.model.load(e))}));var d=this.gui.addFolder("Mesh");d.add(a.default.mesh,"enableHelper",!0).name("Enable Helpers").onChange((function(e){e?n.meshHelper.enable():n.meshHelper.disable()})),d.add(a.default.mesh,"translucent",!0).name("Translucent").onChange((function(e){e?(t.material.transparent=!0,t.material.opacity=.5):t.material.opacity=1})),d.add(a.default.mesh,"wireframe",!0).name("Wireframe").onChange((function(e){t.material.wireframe=e}));var h=this.gui.addFolder("Ambient Light");h.add(a.default.ambientLight,"enabled").name("Enabled").onChange((function(e){n.light.ambientLight.visible=e})),h.addColor(a.default.ambientLight,"color").name("Color").onChange((function(e){n.light.ambientLight.color.setHex(e)}));var f=this.gui.addFolder("Directional Light");f.add(a.default.directionalLight,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.visible=e})),f.addColor(a.default.directionalLight,"color").name("Color").onChange((function(e){n.light.directionalLight.color.setHex(e)}));var m=f.add(a.default.directionalLight,"intensity",0,2).name("Intensity");m.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.intensity=e})),m.onFinishChange((function(){n.controls.enableRotate=!0}));var p=f.add(a.default.directionalLight,"x",-1e3,1e3).name("Position X");p.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.x=e})),p.onFinishChange((function(){n.controls.enableRotate=!0}));var g=f.add(a.default.directionalLight,"y",-1e3,1e3).name("Position Y");g.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.y=e})),g.onFinishChange((function(){n.controls.enableRotate=!0}));var v=f.add(a.default.directionalLight,"z",-1e3,1e3).name("Position Z");v.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.position.z=e})),v.onFinishChange((function(){n.controls.enableRotate=!0}));var b=this.gui.addFolder("Shadow Map");b.add(a.default.shadow,"enabled").name("Enabled").onChange((function(e){n.light.directionalLight.castShadow=e})),b.add(a.default.shadow,"helperEnabled").name("Helper Enabled").onChange((function(e){n.light.directionalLightHelper.visible=e}));var y=b.add(a.default.shadow,"near",0,400).name("Near");y.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.near=e})),y.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var w=b.add(a.default.shadow,"far",0,1200).name("Far");w.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.far=e})),w.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var L=b.add(a.default.shadow,"top",-400,400).name("Top");L.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.top=e})),L.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var S=b.add(a.default.shadow,"right",-400,400).name("Right");S.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.right=e})),S.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var E=b.add(a.default.shadow,"bottom",-400,400).name("Bottom");E.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.bottom=e})),E.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var T=b.add(a.default.shadow,"left",-400,400).name("Left");T.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.camera.left=e})),T.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var C=b.add(a.default.shadow,"bias",-1e-5,1).name("Bias");C.onChange((function(e){n.controls.enableRotate=!1,n.light.directionalLight.shadow.bias=e})),C.onFinishChange((function(){n.controls.enableRotate=!0,n.light.directionalLight.shadow.map.dispose(),n.light.directionalLight.shadow.map=null,n.light.directionalLightHelper.update()}));var M=this.gui.addFolder("Point Light");M.add(a.default.pointLight,"enabled").name("Enabled").onChange((function(e){n.light.pointLight.visible=e})),M.addColor(a.default.pointLight,"color").name("Color").onChange((function(e){n.light.pointLight.color.setHex(e)}));var R=M.add(a.default.pointLight,"intensity",0,2).name("Intensity");R.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.intensity=e})),R.onFinishChange((function(){n.controls.enableRotate=!0}));var x=M.add(a.default.pointLight,"distance",0,1e3).name("Distance");x.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.distance=e})),x.onFinishChange((function(){n.controls.enableRotate=!0}));var A=M.add(a.default.pointLight,"x",-1e3,1e3).name("Position X");A.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.x=e})),A.onFinishChange((function(){n.controls.enableRotate=!0}));var j=M.add(a.default.pointLight,"y",-1e3,1e3).name("Position Y");j.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.y=e})),j.onFinishChange((function(){n.controls.enableRotate=!0}));var P=M.add(a.default.pointLight,"z",-1e3,1e3).name("Position Z");P.onChange((function(e){n.controls.enableRotate=!1,n.light.pointLight.position.z=e})),P.onFinishChange((function(){n.controls.enableRotate=!0}));var k=this.gui.addFolder("Hemi Light");k.add(a.default.hemiLight,"enabled").name("Enabled").onChange((function(e){n.light.hemiLight.visible=e})),k.addColor(a.default.hemiLight,"color").name("Color").onChange((function(e){n.light.hemiLight.color.setHex(e)})),k.addColor(a.default.hemiLight,"groundColor").name("ground Color").onChange((function(e){n.light.hemiLight.groundColor.setHex(e)}));var _=k.add(a.default.hemiLight,"intensity",0,2).name("Intensity");_.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.intensity=e})),_.onFinishChange((function(){n.controls.enableRotate=!0}));var O=k.add(a.default.hemiLight,"x",-1e3,1e3).name("Position X");O.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.x=e})),O.onFinishChange((function(){n.controls.enableRotate=!0}));var D=k.add(a.default.hemiLight,"y",-500,1e3).name("Position Y");D.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.y=e})),D.onFinishChange((function(){n.controls.enableRotate=!0}));var I=k.add(a.default.hemiLight,"z",-1e3,1e3).name("Position Z");I.onChange((function(e){n.controls.enableRotate=!1,n.light.hemiLight.position.z=e})),I.onFinishChange((function(){n.controls.enableRotate=!0}))}},{key:"unload",value:function(){this.gui.destroy(),this.gui=new dat.GUI}}])&&i(t.prototype,n),o&&i(t,o),e}()},"./src/js/app/managers/interaction.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var a=n("./src/js/utils/keyboard.js"),r=n("./src/js/utils/helpers.js"),o=n("./src/js/data/config.js");function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var s=function(){function e(t,n,o,i){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderer=t,this.scene=n,this.camera=o,this.controls=i,this.timeout=null,this.keyboard=new a.default,this.renderer.domElement.addEventListener("mousemove",(function(e){return r.default.throttle(s.onMouseMove(e),250)}),!1),this.renderer.domElement.addEventListener("mouseleave",(function(e){return s.onMouseLeave(e)}),!1),this.renderer.domElement.addEventListener("mouseover",(function(e){return s.onMouseOver(e)}),!1),this.keyboard.domElement.addEventListener("keydown",(function(e){e.repeat||s.keyboard.eventMatches(e,"escape")&&console.log("Escape pressed")}))}var t,n,s;return t=e,(n=[{key:"onMouseOver",value:function(e){e.preventDefault(),o.default.isMouseOver=!0}},{key:"onMouseLeave",value:function(e){e.preventDefault(),o.default.isMouseOver=!1}},{key:"onMouseMove",value:function(e){e.preventDefault(),clearTimeout(this.timeout),this.timeout=setTimeout((function(){o.default.isMouseMoving=!1}),200),o.default.isMouseMoving=!0}}])&&i(t.prototype,n),s&&i(t,s),e}()},"./src/js/app/model/model.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var a=n("./node_modules/three/build/three.module.js"),r=n("./src/js/app/components/material.js"),o=n("./src/js/utils/helpers.js"),i=n("./src/js/utils/bufferGeometryUtils.js"),s=n("./src/js/app/loaders/GLTFLoader.js"),l=n("./src/js/data/config.js");function c(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var u=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.textures=a,this.manager=n,this.obj=null,this.ref=null}var t,n,u;return t=e,(n=[{key:"load",value:function(e){var t=this;switch(e){case"gltf":new s.GLTFLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){var n,r=e.scene;l.default.shadow.enabled&&r.traverse((function(e){(e.isMesh||e.isLight)&&(e.castShadow=!0),e.isMesh&&(e.material.wireframe=l.default.mesh.wireframe,n=e)})),t.obj=n,i.BufferGeometryUtils.computeTangents(n.geometry);var o=new a.Group;o.scale.multiplyScalar(.25),t.scene.add(o),t.ref=o,o.updateMatrixWorld(!0),o.add(n),t.scene.add(r)}),o.default.logProgress(),o.default.logError());break;case"object":new a.ObjectLoader(this.manager).load(l.default.models[l.default.model.selected].path,(function(e){e.traverse((function(e){if(e instanceof a.Mesh){var n=new r.default(16777215).standard;n.map=t.textures.UV,e.material=n,l.default.shadow.enabled&&(e.receiveShadow=!0,e.castShadow=!0)}})),t.obj=e,t.ref=e,e.scale.multiplyScalar(l.default.models[l.default.model.selected].scale),t.scene.add(e)}),o.default.logProgress(),o.default.logError())}}},{key:"unload",value:function(){this.scene.remove(this.ref)}}])&&c(t.prototype,n),u&&c(t,u),e}()},"./src/js/app/model/texture.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),r=n("./node_modules/es6-promise/dist/es6-promise.js"),o=n("./src/js/utils/helpers.js"),i=n("./src/js/data/config.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={}}var t,n,l;return t=e,(n=[{key:"load",value:function(){var e=this,t=new a.TextureLoader,n=i.default.maxAnisotropy,s=i.default.texture.imageFiles,l=[];return t.setPath(i.default.texture.path),s.forEach((function(e){l.push(new r.Promise((function(r,i){t.load(e.image,(function(t){t.anisotropy=n;var o={};o[e.name]=t,o[e.name]instanceof a.Texture&&r(o)}),o.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),r.Promise.all(l).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]]}),(function(e){return console.log(e)}))}}])&&s(t.prototype,n),l&&s(t,l),e}()},"./src/js/data/config.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={isDev:!1,isShowingStats:!0,isLoaded:!1,isTweening:!1,isRotating:!0,isMouseMoving:!1,isMouseOver:!1,maxAnisotropy:1,dpr:1,easing:n("./node_modules/@tweenjs/tween.js/dist/tween.esm.js").default.Easing.Quadratic.InOut,duration:500,model:{selected:0,initialTypes:["gltf","object"],type:"gltf"},models:[{path:"./assets/models/duck.gltf",scale:20,type:"gltf"},{path:"./assets/models/Teapot.json",scale:20,type:"object"}],texture:{path:"./assets/textures/",imageFiles:[{name:"UV",image:"UV_Grid_Sm.jpg"}]},mesh:{enableHelper:!0,wireframe:!1,translucent:!1,material:{color:16777215,emissive:16777215}},fog:{color:16777215,near:8e-4},camera:{fov:40,near:2,far:1e3,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!0,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:200,maxDistance:600,minPolarAngle:Math.PI/5,maxPolarAngle:Math.PI/2,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860},directionalLight:{enabled:!0,color:15790320,intensity:.4,x:-75,y:280,z:150},shadow:{enabled:!0,helperEnabled:!0,bias:0,mapWidth:2048,mapHeight:2048,near:250,far:400,top:100,right:100,bottom:-100,left:-100},pointLight:{enabled:!0,color:16777215,intensity:.34,distance:115,x:0,y:0,z:0},hemiLight:{enabled:!0,color:13158600,groundColor:16777215,intensity:.55,x:0,y:0,z:0}}},"./src/js/utils/bufferGeometryUtils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BufferGeometryUtils:()=>r});var a=n("./node_modules/three/build/three.module.js"),r={computeTangents:function(e){var t=e.index,n=e.attributes;if(null!==t&&void 0!==n.position&&void 0!==n.normal&&void 0!==n.uv){var r=t.array,o=n.position.array,i=n.normal.array,s=n.uv.array,l=o.length/3;void 0===n.tangent&&e.setAttribute("tangent",new a.BufferAttribute(new Float32Array(4*l),4));for(var c=n.tangent.array,u=[],d=[],h=0;h<l;h++)u[h]=new a.Vector3,d[h]=new a.Vector3;var f=new a.Vector3,m=new a.Vector3,p=new a.Vector3,g=new a.Vector2,v=new a.Vector2,b=new a.Vector2,y=new a.Vector3,w=new a.Vector3,L=e.groups;0===L.length&&(L=[{start:0,count:r.length}]);h=0;for(var S=L.length;h<S;++h)for(var E=_=(k=L[h]).start,T=_+k.count;E<T;E+=3)O(r[E+0],r[E+1],r[E+2]);var C,M,R,x=new a.Vector3,A=new a.Vector3,j=new a.Vector3,P=new a.Vector3;for(h=0,S=L.length;h<S;++h){var k,_;for(E=_=(k=L[h]).start,T=_+k.count;E<T;E+=3)D(r[E+0]),D(r[E+1]),D(r[E+2])}}else console.error("THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");function O(e,t,n){f.fromArray(o,3*e),m.fromArray(o,3*t),p.fromArray(o,3*n),g.fromArray(s,2*e),v.fromArray(s,2*t),b.fromArray(s,2*n),m.sub(f),p.sub(f),v.sub(g),b.sub(g);var a=1/(v.x*b.y-b.x*v.y);isFinite(a)&&(y.copy(m).multiplyScalar(b.y).addScaledVector(p,-v.y).multiplyScalar(a),w.copy(p).multiplyScalar(v.x).addScaledVector(m,-b.x).multiplyScalar(a),u[e].add(y),u[t].add(y),u[n].add(y),d[e].add(w),d[t].add(w),d[n].add(w))}function D(e){j.fromArray(i,3*e),P.copy(j),M=u[e],x.copy(M),x.sub(j.multiplyScalar(j.dot(M))).normalize(),A.crossVectors(P,M),R=A.dot(d[e]),C=R<0?-1:1,c[4*e]=x.x,c[4*e+1]=x.y,c[4*e+2]=x.z,c[4*e+3]=C}},mergeBufferGeometries:function(e,t){for(var n=null!==e[0].index,r=new Set(Object.keys(e[0].attributes)),o=new Set(Object.keys(e[0].morphAttributes)),i={},s={},l=e[0].morphTargetsRelative,c=new a.BufferGeometry,u=0,d=0;d<e.length;++d){var h=e[d],f=0;if(n!==(null!==h.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(var m in h.attributes){if(!r.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+'. All geometries must have compatible attributes; make sure "'+m+'" attribute exists among all geometries, or in none of them.'),null;void 0===i[m]&&(i[m]=[]),i[m].push(h.attributes[m]),f++}if(f!==r.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". Make sure all geometries have the same number of attributes."),null;if(l!==h.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(var m in h.morphAttributes){if(!o.has(m))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===s[m]&&(s[m]=[]),s[m].push(h.morphAttributes[m])}if(c.userData.mergedUserData=c.userData.mergedUserData||[],c.userData.mergedUserData.push(h.userData),t){var p;if(n)p=h.index.count;else{if(void 0===h.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+d+". The geometry must have either an index or a position attribute"),null;p=h.attributes.position.count}c.addGroup(u,p,d),u+=p}}if(n){var g=0,v=[];for(d=0;d<e.length;++d){for(var b=e[d].index,y=0;y<b.count;++y)v.push(b.getX(y)+g);g+=e[d].attributes.position.count}c.setIndex(v)}for(var m in i){var w=this.mergeBufferAttributes(i[m]);if(!w)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" attribute."),null;c.setAttribute(m,w)}for(var m in s){var L=s[m][0].length;if(0===L)break;c.morphAttributes=c.morphAttributes||{},c.morphAttributes[m]=[];for(d=0;d<L;++d){var S=[];for(y=0;y<s[m].length;++y)S.push(s[m][y][d]);var E=this.mergeBufferAttributes(S);if(!E)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+m+" morphAttribute."),null;c.morphAttributes[m].push(E)}}return c},mergeBufferAttributes:function(e){for(var t,n,r,o=0,i=0;i<e.length;++i){var s=e[i];if(s.isInterleavedBufferAttribute)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported."),null;if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null;if(void 0===n&&(n=s.itemSize),n!==s.itemSize)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null;if(void 0===r&&(r=s.normalized),r!==s.normalized)return console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null;o+=s.array.length}var l=new t(o),c=0;for(i=0;i<e.length;++i)l.set(e[i].array,c),c+=e[i].array.length;return new a.BufferAttribute(l,n,r)},interleaveAttributes:function(e){for(var t,n=0,r=0,o=0,i=e.length;o<i;++o){var s=e[o];if(void 0===t&&(t=s.array.constructor),t!==s.array.constructor)return console.error("AttributeBuffers of different types cannot be interleaved"),null;n+=s.array.length,r+=s.itemSize}var l=new a.InterleavedBuffer(new t(n),r),c=0,u=[],d=["getX","getY","getZ","getW"],h=["setX","setY","setZ","setW"],f=0;for(i=e.length;f<i;f++){var m=(s=e[f]).itemSize,p=s.count,g=new a.InterleavedBufferAttribute(l,m,c,s.normalized);u.push(g),c+=m;for(var v=0;v<p;v++)for(var b=0;b<m;b++)g[h[b]](v,s[d[b]](v))}return u},estimateBytesUsed:function(e){var t=0;for(var n in e.attributes){var a=e.getAttribute(n);t+=a.count*a.itemSize*a.array.BYTES_PER_ELEMENT}var r=e.getIndex();return t+=r?r.count*r.itemSize*r.array.BYTES_PER_ELEMENT:0},mergeVertices:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-4;t=Math.max(t,Number.EPSILON);for(var n={},r=e.getIndex(),o=e.getAttribute("position"),i=r?r.count:o.count,s=0,l=Object.keys(e.attributes),c={},u={},d=[],h=["getX","getY","getZ","getW"],f=0,m=l.length;f<m;f++){c[w=l[f]]=[],(T=e.morphAttributes[w])&&(u[w]=new Array(T.length).fill().map((function(){return[]})))}var p=Math.log10(1/t),g=Math.pow(10,p);for(f=0;f<i;f++){var v=r?r.getX(f):f,b="",y=0;for(m=l.length;y<m;y++)for(var w=l[y],L=(E=e.getAttribute(w)).itemSize,S=0;S<L;S++)b+="".concat(~~(E[h[S]](v)*g),",");if(b in n)d.push(n[b]);else{for(y=0,m=l.length;y<m;y++){w=l[y];var E=e.getAttribute(w),T=e.morphAttributes[w],C=(L=E.itemSize,c[w]),M=u[w];for(S=0;S<L;S++){var R=h[S];if(C.push(E[R](v)),T)for(var x=0,A=T.length;x<A;x++)M[x].push(T[x][R](v))}}n[b]=s,d.push(s),s++}}var j=e.clone();for(f=0,m=l.length;f<m;f++){w=l[f];var P=e.getAttribute(w),k=new P.array.constructor(c[w]);E=new a.BufferAttribute(k,P.itemSize,P.normalized);if(j.setAttribute(w,E),w in u)for(y=0;y<u[w].length;y++){var _=e.morphAttributes[w][y],O=(k=new _.array.constructor(u[w][y]),new a.BufferAttribute(k,_.itemSize,_.normalized));j.morphAttributes[w][y]=O}}return j.setIndex(d),j},toTrianglesDrawMode:function(e,t){if(t===a.TrianglesDrawMode)return console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles."),e;if(t===a.TriangleFanDrawMode||t===a.TriangleStripDrawMode){var n=e.getIndex();if(null===n){var r=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<o.count;i++)r.push(i);e.setIndex(r),n=e.getIndex()}var s=n.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=s;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<s;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==s&&console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c.clearGroups(),c}return console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:",t),e}}},"./src/js/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,n=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=n,t.appendChild(a)}}},"./src/js/utils/helpers.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>r});var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,r=[{key:"throttle",value:function(e,t,n){var a,r;return t||(t=250),function(){var o=n||this,i=+new Date,s=arguments;a&&i<a+t?(clearTimeout(r),r=setTimeout((function(){a=i,e.apply(o,s)}),t)):(a=i,e.apply(o,s))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,n){return function(a){e[t]=n[a],e.needsUpdate=!0}}}],(n=null)&&a(t.prototype,n),r&&a(t,r),e}()},"./src/js/utils/keyboard.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>o});var r={left:37,up:38,right:39,down:40,space:32,tab:9,escape:27},o=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.domElement=t||document,this.keyCodes={},this.domElement.addEventListener("keydown",(function(e){return n.onKeyChange(e)}),!1),this.domElement.addEventListener("keyup",(function(e){return n.onKeyChange(e)}),!1),window.addEventListener("blur",(function(){return n.onBlur}),!1)}var t,n,o;return t=e,(n=[{key:"destroy",value:function(){var e=this;this.domElement.removeEventListener("keydown",(function(t){return e.onKeyChange(t)}),!1),this.domElement.removeEventListener("keyup",(function(t){return e.onKeyChange(t)}),!1),window.removeEventListener("blur",(function(){return e.onBlur}),!1)}},{key:"onBlur",value:function(){for(var e in this.keyCodes)this.keyCodes[e]=!1}},{key:"onKeyChange",value:function(e){var t=e.keyCode;this.keyCodes[t]="keydown"===e.type}},{key:"pressed",value:function(e){for(var t=e.split("+"),n=0;n<t.length;n++){var a=t[n],o=!1;if(o=-1!=Object.keys(r).indexOf(a)?this.keyCodes[r[a]]:this.keyCodes[a.toUpperCase().charCodeAt(0)],!o)return!1}return!0}},{key:"eventMatches",value:function(e,t){for(var n=r,a=Object.keys(n),o=t.split("+"),i=0;i<o.length;i++){var s=o[i],l=!1;if("shift"===s?l=!!e.shiftKey:"ctrl"===s?l=!!e.ctrlKey:"alt"===s?l=!!e.altKey:"meta"===s?l=!!e.metaKey:-1!==a.indexOf(s)?l=e.keyCode===n[s]:e.keyCode===s.toUpperCase().charCodeAt(0)&&(l=!0),!l)return!1}return!0}}])&&a(t.prototype,n),o&&a(t,o),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function n(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var n,a,r,o,i,s,l,c,u=this,d=1e-6,h=0,f=0,m=1,p=new e.Vector3,g=!1;this.getPolarAngle=function(){return a},this.getAzimuthalAngle=function(){return n},this.rotateLeft=function(e){f-=e},this.rotateUp=function(e){h-=e},this.panLeft=(r=new e.Vector3,function(e){var t=this.object.matrix.elements;r.set(t[0],t[1],t[2]),r.multiplyScalar(-e),p.add(r)}),this.panUp=function(){var t=new e.Vector3;return function(e){var n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),p.add(t)}}(),this.pan=function(t,n,a,r){if(u.object instanceof e.PerspectiveCamera){var o=u.object.position.clone().sub(u.target).length();o*=Math.tan(u.object.fov/2*Math.PI/180),u.panLeft(2*t*o/r),u.panUp(2*n*o/r)}else u.object instanceof e.OrthographicCamera?(u.panLeft(t*(u.object.right-u.object.left)/a),u.panUp(n*(u.object.top-u.object.bottom)/r)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){u.object instanceof e.PerspectiveCamera?m/=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){u.object instanceof e.PerspectiveCamera?m*=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(o=new e.Vector3,i=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),s=i.clone().inverse(),l=new e.Vector3,c=new e.Quaternion,function(){var e=this.object.position;o.copy(e).sub(this.target),o.applyQuaternion(i),n=Math.atan2(o.x,o.z),a=Math.atan2(Math.sqrt(o.x*o.x+o.z*o.z),o.y),n+=f,a+=h,n=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,n)),a=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,a)),a=Math.max(d,Math.min(Math.PI-d,a));var t=o.length()*m;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(p),o.x=t*Math.sin(a)*Math.sin(n),o.y=t*Math.cos(a),o.z=t*Math.sin(a)*Math.cos(n),o.applyQuaternion(s),e.copy(this.target).add(o),this.object.lookAt(this.target),!0===this.enableDamping?(f*=1-this.dampingFactor,h*=1-this.dampingFactor):(f=0,h=0),m=1,p.set(0,0,0),!!(g||l.distanceToSquared(this.object.position)>d||8*(1-c.dot(this.object.quaternion))>d)&&(l.copy(this.object.position),c.copy(this.object.quaternion),g=!1,!0)})}function a(t,a){var r=new n(t);this.domElement=void 0!==a?a:document,Object.defineProperty(this,"constraint",{get:function(){return r}}),this.getPolarAngle=function(){return r.getPolarAngle()},this.getAzimuthalAngle=function(){return r.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var o=this,i=new e.Vector2,s=new e.Vector2,l=new e.Vector2,c=new e.Vector2,u=new e.Vector2,d=new e.Vector2,h=new e.Vector2,f=new e.Vector2,m=new e.Vector2,p=-1,g=0,v=1,b=2,y=3,w=4,L=5,S=p;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var E={type:"change"},T={type:"start"},C={type:"end"};function M(e,t){var n=o.domElement===document?o.domElement.body:o.domElement;r.pan(e,t,n.clientWidth,n.clientHeight)}function R(){return Math.pow(.95,o.zoomSpeed)}function x(e){if(!1!==o.enabled){if(e.preventDefault(),e.button===o.mouseButtons.ORBIT){if(!1===o.enableRotate)return;S=g,i.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.ZOOM){if(!1===o.enableZoom)return;S=v,h.set(e.clientX,e.clientY)}else if(e.button===o.mouseButtons.PAN){if(!1===o.enablePan)return;S=b,c.set(e.clientX,e.clientY)}S!==p&&(document.addEventListener("mousemove",A,!1),document.addEventListener("mouseup",j,!1),o.dispatchEvent(T))}}function A(e){if(!1!==o.enabled){e.preventDefault();var t=o.domElement===document?o.domElement.body:o.domElement;if(S===g){if(!1===o.enableRotate)return;s.set(e.clientX,e.clientY),l.subVectors(s,i),r.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),r.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s)}else if(S===v){if(!1===o.enableZoom)return;f.set(e.clientX,e.clientY),m.subVectors(f,h),m.y>0?r.dollyIn(R()):m.y<0&&r.dollyOut(R()),h.copy(f)}else if(S===b){if(!1===o.enablePan)return;u.set(e.clientX,e.clientY),d.subVectors(u,c),M(d.x,d.y),c.copy(u)}S!==p&&o.update()}}function j(){!1!==o.enabled&&(document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",j,!1),o.dispatchEvent(C),S=p)}function P(e){if(!1!==o.enabled&&!1!==o.enableZoom&&S===p){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?r.dollyOut(R()):t<0&&r.dollyIn(R()),o.update(),o.dispatchEvent(T),o.dispatchEvent(C)}}function k(e){if(!1!==o.enabled&&!1!==o.enableKeys&&!1!==o.enablePan)switch(e.keyCode){case o.keys.UP:M(0,o.keyPanSpeed),o.update();break;case o.keys.BOTTOM:M(0,-o.keyPanSpeed),o.update();break;case o.keys.LEFT:M(o.keyPanSpeed,0),o.update();break;case o.keys.RIGHT:M(-o.keyPanSpeed,0),o.update()}}function _(e){if(!1!==o.enabled){switch(e.touches.length){case 1:if(!1===o.enableRotate)return;S=y,i.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===o.enableZoom)return;S=w;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+n*n);h.set(0,a);break;case 3:if(!1===o.enablePan)return;S=L,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:S=p}S!==p&&o.dispatchEvent(T)}}function O(e){if(!1!==o.enabled){e.preventDefault(),e.stopPropagation();var t=o.domElement===document?o.domElement.body:o.domElement;switch(e.touches.length){case 1:if(!1===o.enableRotate)return;if(S!==y)return;s.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(s,i),r.rotateLeft(2*Math.PI*l.x/t.clientWidth*o.rotateSpeed),r.rotateUp(2*Math.PI*l.y/t.clientHeight*o.rotateSpeed),i.copy(s),o.update();break;case 2:if(!1===o.enableZoom)return;if(S!==w)return;var n=e.touches[0].pageX-e.touches[1].pageX,a=e.touches[0].pageY-e.touches[1].pageY,g=Math.sqrt(n*n+a*a);f.set(0,g),m.subVectors(f,h),m.y>0?r.dollyOut(R()):m.y<0&&r.dollyIn(R()),h.copy(f),o.update();break;case 3:if(!1===o.enablePan)return;if(S!==L)return;u.set(e.touches[0].pageX,e.touches[0].pageY),d.subVectors(u,c),M(d.x,d.y),c.copy(u),o.update();break;default:S=p}}}function D(){!1!==o.enabled&&(o.dispatchEvent(C),S=p)}function I(e){e.preventDefault()}this.update=function(){this.autoRotate&&S===p&&r.rotateLeft(2*Math.PI/60/60*o.autoRotateSpeed),!0===r.update()&&this.dispatchEvent(E)},this.reset=function(){S=p,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(E),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",I,!1),this.domElement.removeEventListener("mousedown",x,!1),this.domElement.removeEventListener("mousewheel",P,!1),this.domElement.removeEventListener("MozMousePixelScroll",P,!1),this.domElement.removeEventListener("touchstart",_,!1),this.domElement.removeEventListener("touchend",D,!1),this.domElement.removeEventListener("touchmove",O,!1),document.removeEventListener("mousemove",A,!1),document.removeEventListener("mouseup",j,!1),window.removeEventListener("keydown",k,!1)},this.domElement.addEventListener("contextmenu",I,!1),this.domElement.addEventListener("mousedown",x,!1),this.domElement.addEventListener("mousewheel",P,!1),this.domElement.addEventListener("MozMousePixelScroll",P,!1),this.domElement.addEventListener("touchstart",_,!1),this.domElement.addEventListener("touchend",D,!1),this.domElement.addEventListener("touchmove",O,!1),window.addEventListener("keydown",k,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),a.prototype=Object.create(e.EventDispatcher.prototype),a.prototype.constructor=a,Object.defineProperties(a.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),a}},"./src/js/webrtc/peerController.js":(e,t,n)=>{"use strict";function a(e,t){var n;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var a=0,o=function(){};return{s:o,n:function(){return a>=e.length?{done:!0}:{done:!1,value:e[a++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,s=!0,l=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return s=e.done,e},e:function(e){l=!0,i=e},f:function(){try{s||null==n.return||n.return()}finally{if(l)throw i}}}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>i});var i=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var t=n("./node_modules/socket.io-client/lib/index.js").connect(),a=!1,r=prompt("Enter room name:");""!==r&&(t.emit("create or join",r),console.log("Attempted to create or join room",r));document.querySelector("#localVideo"),document.querySelector("#remoteVideo");this.pcConfig={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:numb.viagenie.ca",credential:"muazkh",username:"webrtc@live.com"},{urls:"turn:192.158.29.39:3478?transport=udp",credential:"JZEOEt2V3Qb0y27GRntt2u2PAYA=",username:"28224511:1379330808"},{urls:"turn:192.158.29.39:3478?transport=tcp",credential:"JZEOEt2V3Qb0y27GRntt2u2PAYA=",username:"28224511:1379330808"}]},this.isStarted=!1,this.peerConnection=this.createPeerConnection(),this.dataChannel=this.initDataChannel(),t.on("created",(function(e){console.log("Created room "+e),a=!0})),t.on("full",(function(e){console.log("Room "+e+" is full")})),t.on("join",(function(e){console.log("Another peer made a request to join room "+e),console.log("You are the initiator of room "+e+"!"),!0})),t.on("joined",(function(e){console.log("Joined room: "+e),!0})),t.on("log",(function(e){console.log.apply(console,e)})),t.on("message",(function(e){if(console.log("Client received message:",e),"got user media"===e)maybeStart();else if("offer"===e.type)a||isStarted||maybeStart(),peerConnection.setRemoteDescription(e).then((function(){return doAnswer()}));else if("answer"===e.type&&isStarted)peerConnection.setRemoteDescription(new RTCSessionDescription(e));else if("candidate"===e.type&&isStarted){var t=new RTCIceCandidate({sdpMLineIndex:e.label,candidate:e.candidate});peerConnection.addIceCandidate(t)}else"bye"===e&&isStarted&&handleRemoteHangup()}))}var t,r,i;return t=e,(r=[{key:"maybeStart",value:function(){if(console.log(">>>>>>> maybeStart() ",isStarted,localStream,isChannelReady),!isStarted&&"undefined"!=typeof localStream&&isChannelReady){console.log(">>>>>> creating peer connection"),createPeerConnection();var e,t=a(localStream.getTracks());try{for(t.s();!(e=t.n()).done;){var n=e.value;peerConnection.addTrack(n)}}catch(e){t.e(e)}finally{t.f()}isStarted=!0,console.log("isInitiator",isInitiator),isInitiator&&(initDataChannel(),console.log("Created RTCDataChannel"),doCall()),gameController.startSharedSceneSync()}}},{key:"createPeerConnection",value:function(){try{var e;return(location.hostname,e=new RTCPeerConnection(this.pcConfig)).onicecandidate=this.handleIceCandidate,e.ontrack=this.handleTrackAdded,e.ondatachannel=this.handleDataChannelAdded,console.log("Created RTCPeerConnnection: "+e),e}catch(e){return console.log("Failed to create PeerConnection, exception: "+e.message),void alert("Cannot create RTCPeerConnection object.")}}},{key:"initDataChannel",value:function(){console.log("CREATING DATACHANNEL gameUpdates");var e=this.peerConnection.createDataChannel("gameUpdates",{ordered:!1,id:this.room});return e.onmessage=this.handleReceiveMessage,e.onerror=function(e){console.log("Data Channel Error:",e)},e.onopen=this.handleDataChannelStatusChange,e.onclose=this.handleDataChannelStatusChange,console.log("CREATED DATACHANNEL gameUpdates"),e}},{key:"handleIceCandidate",value:function(e){console.log("icecandidate event: ",e),e.candidate?sendMessage({type:"candidate",label:e.candidate.sdpMLineIndex,id:e.candidate.sdpMid,candidate:e.candidate.candidate}):console.log("End of candidates.")}},{key:"sendMessage",value:function(e){console.log("Client sending message: ",e),this.socket.emit("message",room,e)}},{key:"handleTrackAdded",value:function(e){e.streams&&e.streams[0]?(console.log("event streams detected"),remoteVideo.srcObject=e.streams[0]):(remoteStream||(console.log("Creating new MediaStream"),remoteStream=new MediaStream),console.log("adding track to remote stream"),remoteStream.addTrack(e.track),remoteVideo.setAttribute("src",remoteStream),remoteVideo.srcObject=remoteStream),remoteVideo.autoplay=!0}},{key:"handleDataChannelAdded",value:function(e){console.log("Received Channel Callback"),this.dataChannel=e.channel,this.dataChannel.onmessage=handleReceiveMessage,this.dataChannel.onerror=function(e){console.log("Data Channel Error:",e)},this.dataChannel.onopen=this.handleDataChannelStatusChange,this.dataChannel.onclose=this.handleDataChannelStatusChange,console.log("CREATED DATACHANNEL gameUpdates")}},{key:"handleDataChannelStatusChange",value:function(){this.dataChannel&&("open"===this.dataChannel.readyState?console.log("DATA CHANNEL STATE: open"):console.log("DATA CHANNEL STATE: closed"))}},{key:"handleReceiveMessage",value:function(e){}},{key:"doCall",value:function(){console.log("Sending offer to peer"),this.peerConnection.createOffer(this.setLocalAndSendMessage,this.handleCreateOfferError)}},{key:"doAnswer",value:function(){console.log("Sending answer to peer."),this.peerConnection.createAnswer().then(setLocalAndSendMessage,onCreateSessionDescriptionError)}},{key:"handleCreateOfferError",value:function(e){console.log("createOffer() error: ",e)}},{key:"setLocalAndSendMessage",value:function(e){this.peerConnection.setLocalDescription(e),console.log("setLocalAndSendMessage sending message",e),sendMessage(e)}},{key:"onCreateSessionDescriptionError",value:function(e){console.log("Failed to create session description: "+e.toString())}},{key:"hangup",value:function(){console.log("Hanging up."),stopConnection(),sendMessage("bye")}},{key:"handleRemoteHangup",value:function(){console.log("Session terminated."),stopConnection(),this.isInitiator=!0}},{key:"stopConnection",value:function(){this.isStarted=!1,this.dataChannel.close(),this.peerConnection.close(),this.peerConnection=null,this.remoteVideo.pause(),this.remoteVideo.removeAttribute("src"),this.remoteVideo.removeAttribute("autoplay"),this.remoteStream=null,this.remoteVideo.load()}},{key:"startGameSync",value:function(){}},{key:"sendGameobjectPositions",value:function(){this.dataChannel&&this.dataChannel.readyState}}])&&o(t.prototype,r),i&&o(t,i),e}()},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)},"?1bcf":()=>{}},e=>{"use strict";e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,